Elm.Utils = Elm.Utils || {};
Elm.Utils.SmartDisplay = Elm.Utils.SmartDisplay || {};
Elm.Utils.SmartDisplay.make = function (_elm) {
   "use strict";
   _elm.Utils = _elm.Utils || {};
   _elm.Utils.SmartDisplay = _elm.Utils.SmartDisplay || {};
   if (_elm.Utils.SmartDisplay.values)
   return _elm.Utils.SmartDisplay.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Utils.SmartDisplay";
   var Array = Elm.Array.make(_elm);
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Types = Types || {};
   Types.SmartDisplay = Elm.Types.SmartDisplay.make(_elm);
   var Utils = Utils || {};
   Utils.Naive = Elm.Utils.Naive.make(_elm);
   var _op = {};
   var getImage = function (str) {
      return function () {
         var fileName = function (x) {
            return _L.append("Symbols/SDSymbols/SD",
            _L.append(x,".gif"));
         };
         return function () {
            switch (str)
            {case "equal":
               return fileName("Equal");
               case "minus":
               return fileName("Minus");
               case "plus":
               return fileName("Plus");}
            _E.Case($moduleName,
            "between lines 172 and 175");
         }();
      }();
   };
   var checkbox = A3(Graphics.Collage.collage,
   20,
   20,
   _L.fromArray([Graphics.Collage.outlined(Graphics.Collage.solid(Color.charcoal))(Graphics.Collage.square(10))]));
   var insertCheckbox = function (elem) {
      return A2(Graphics.Element.flow,
      Graphics.Element.right,
      _L.fromArray([checkbox,elem]));
   };
   var subbullet = A3(Graphics.Collage.collage,
   30,
   10,
   _L.fromArray([Graphics.Collage.filled(Color.black)(Graphics.Collage.square(3))]));
   var insertSubBullet = function (elem) {
      return A2(Graphics.Element.flow,
      Graphics.Element.right,
      _L.fromArray([subbullet
                   ,A2(Graphics.Element.spacer,
                   5,
                   Graphics.Element.heightOf(elem))
                   ,elem]));
   };
   var bullet = A3(Graphics.Collage.collage,
   10,
   10,
   _L.fromArray([Graphics.Collage.filled(Color.black)(Graphics.Collage.circle(4))]));
   var insertBullet = function (elem) {
      return A2(Graphics.Element.flow,
      Graphics.Element.right,
      _L.fromArray([bullet
                   ,A2(Graphics.Element.spacer,
                   5,
                   Graphics.Element.heightOf(elem))
                   ,elem]));
   };
   var getRectangle = F2(function (_v1,
   funcGrad) {
      return function () {
         switch (_v1.ctor)
         {case "_Tuple2":
            return A3(Graphics.Collage.collage,
              _v1._0,
              _v1._1,
              _L.fromArray([Graphics.Collage.gradient(funcGrad(Basics.toFloat(_v1._0)))(A2(Graphics.Collage.rect,
              Basics.toFloat(_v1._0),
              Basics.toFloat(_v1._1)))]));}
         _E.Case($moduleName,
         "on line 145, column 3 to 80");
      }();
   });
   var getHorizontalDivider = function (w) {
      return Graphics.Element.color(Color.grey)(A2(Graphics.Element.spacer,
      w,
      4));
   };
   var getVerticalDivider = function (h) {
      return Graphics.Element.color(Color.black)(A2(Graphics.Element.spacer,
      2,
      h));
   };
   var getFrameBody = function (_v5) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple2":
            return A3(Graphics.Collage.collage,
              _v5._0,
              _v5._1,
              _L.fromArray([Graphics.Collage.outlined(_U.replace([["width"
                                                                  ,10]
                                                                 ,["color"
                                                                  ,Color.darkGrey]],
              Graphics.Collage.defaultLine))(A2(Graphics.Collage.rect,
              Basics.toFloat(_v5._0),
              Basics.toFloat(_v5._1)))]));}
         _E.Case($moduleName,
         "between lines 126 and 127");
      }();
   };
   var lgrad2 = function (x) {
      return A3(Color.linear,
      {ctor: "_Tuple2",_0: x,_1: 0},
      {ctor: "_Tuple2",_0: x,_1: x},
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: 0
                    ,_1: A3(Color.rgb,174,188,191)}
                   ,{ctor: "_Tuple2"
                    ,_0: 0.47
                    ,_1: A3(Color.rgb,110,119,116)}
                   ,{ctor: "_Tuple2"
                    ,_0: 0.59
                    ,_1: A3(Color.rgb,10,14,10)}
                   ,{ctor: "_Tuple2"
                    ,_0: 1
                    ,_1: Color.black}]));
   };
   var getBlockHeading = function (_v9) {
      return function () {
         switch (_v9.ctor)
         {case "_Tuple2":
            return A2(getRectangle,
              {ctor: "_Tuple2"
              ,_0: _v9._0
              ,_1: _v9._1},
              lgrad2);}
         _E.Case($moduleName,
         "on line 132, column 3 to 28");
      }();
   };
   var lgrad1 = function (x) {
      return A3(Color.linear,
      {ctor: "_Tuple2",_0: x,_1: 0},
      {ctor: "_Tuple2",_0: x,_1: x},
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: 0
                    ,_1: Color.grey}
                   ,{ctor: "_Tuple2"
                    ,_0: 0.5
                    ,_1: A3(Color.rgb,105,99,99)}
                   ,{ctor: "_Tuple2"
                    ,_0: 0.55
                    ,_1: A3(Color.rgb,225,225,225)}
                   ,{ctor: "_Tuple2"
                    ,_0: 1
                    ,_1: Color.grey}]));
   };
   var getBlockBody = function (_v13) {
      return function () {
         switch (_v13.ctor)
         {case "_Tuple2":
            return A2(getRectangle,
              {ctor: "_Tuple2"
              ,_0: _v13._0
              ,_1: _v13._1},
              lgrad1);}
         _E.Case($moduleName,
         "on line 122, column 3 to 28");
      }();
   };
   var rgrad1 = function (x) {
      return A5(Color.radial,
      {ctor: "_Tuple2",_0: 0,_1: 0},
      x * 0.5,
      {ctor: "_Tuple2",_0: 0,_1: 10},
      x * 0.9,
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: 0
                    ,_1: Color.darkGrey}
                   ,{ctor: "_Tuple2"
                    ,_0: 0.8
                    ,_1: Color.grey}
                   ,{ctor: "_Tuple2"
                    ,_0: 1
                    ,_1: Color.darkGrey}]));
   };
   var getCircle = function (r) {
      return A2(Graphics.Collage.gradient,
      rgrad1(r),
      Graphics.Collage.circle(r));
   };
   var scaleItem = F2(function (w,
   elem) {
      return function () {
         var scaleFactor = Basics.toFloat(w) / Basics.toFloat(Graphics.Element.widthOf(elem));
         var newH = Basics.truncate(scaleFactor * Basics.toFloat(Graphics.Element.heightOf(elem)));
         return A3(Graphics.Collage.collage,
         w,
         newH,
         _L.fromArray([Graphics.Collage.scale(scaleFactor)(Graphics.Collage.toForm(elem))]));
      }();
   });
   var drawLine = F2(function (initial,
   finals) {
      return function () {
         var makeLine = function (f) {
            return Graphics.Collage.traced(Graphics.Collage.solid(Color.black))(A2(Graphics.Collage.segment,
            initial,
            f));
         };
         return A2(List.map,
         makeLine,
         finals);
      }();
   });
   var distribute = F2(function (distPoints,
   initial) {
      return List.map(function (_v17) {
         return function () {
            switch (_v17.ctor)
            {case "_Tuple2":
               return A2(Graphics.Collage.move,
                 _v17._0,
                 _v17._1);}
            _E.Case($moduleName,
            "on line 82, column 20 to 29");
         }();
      })(A2(List.zip,
      distPoints,
      initial));
   });
   var getdistributePoints = F2(function (r,
   distAngles) {
      return A2(List.map,
      function (a) {
         return {ctor: "_Tuple2"
                ,_0: r * Basics.cos(a)
                ,_1: r * Basics.sin(a)};
      },
      distAngles);
   });
   var getdistributionAngles = F2(function (n,
   sdType) {
      return function () {
         var extremePoint = Basics.truncate(Basics.toFloat(n) / 2);
         var distriPoints = List.reverse(_L.range(0 - extremePoint,
         extremePoint));
         var shift = _U.eq(A2(Basics.mod,
         n,
         2),
         0) ? 0.5 : 0;
         var completeAngle = function () {
            switch (sdType.ctor)
            {case "CircleCone": return 120;
               case "CircleFull": return 360;
               case "CircleHalf": return 180;}
            _E.Case($moduleName,
            "between lines 64 and 68");
         }();
         var dTheta = Basics.degrees(completeAngle / Basics.toFloat(n));
         return A2(List.map,
         function (x) {
            return (Basics.toFloat(x) - shift) * dTheta;
         },
         distriPoints);
      }();
   });
   var getLevelNumber = F2(function (level,
   route) {
      return _U.cmp(level,
      List.length(route)) > 0 ? -1 : List.last(A2(List.take,
      level,
      route));
   });
   var getItemFromRoute = function (route) {
      return A2(getLevelNumber,
      1,
      route);
   };
   var getSubitemFromRoute = function (route) {
      return A2(getLevelNumber,
      2,
      route);
   };
   var getSubsubitemFromRoute = function (route) {
      return A2(getLevelNumber,
      3,
      route);
   };
   var filterOutLevel = F2(function (levels,
   itemList) {
      return A2(List.filter,
      function (x) {
         return A2(List.any,
         function (y) {
            return _U.eq(List.length(x.route),
            y);
         },
         levels);
      },
      itemList);
   });
   var filterOutSubsubitems = function (itemList) {
      return A2(filterOutLevel,
      _L.fromArray([3]),
      itemList);
   };
   var filterOutSubsubitemsOfSubitem = F2(function (currentRoute,
   itemList) {
      return function () {
         var currentSubitem = getSubitemFromRoute(currentRoute);
         var currentItem = getItemFromRoute(currentRoute);
         return List.filter(function (x) {
            return _U.eq(getItemFromRoute(x.route),
            currentItem);
         })(List.filter(function (x) {
            return _U.eq(getSubitemFromRoute(x.route),
            currentSubitem);
         })(filterOutSubsubitems(itemList)));
      }();
   });
   var filterOutSubitems = function (itemList) {
      return A2(filterOutLevel,
      _L.fromArray([2]),
      itemList);
   };
   var filterOutSubitemsOfItem = F2(function (currentRoute,
   itemList) {
      return function () {
         var currentItem = getItemFromRoute(currentRoute);
         return List.filter(function (x) {
            return _U.eq(getItemFromRoute(x.route),
            currentItem);
         })(filterOutSubitems(itemList));
      }();
   });
   var filterOutItems = function (itemList) {
      return A2(filterOutLevel,
      _L.fromArray([1]),
      itemList);
   };
   var getItemAt = F2(function (ind,
   itemList) {
      return function () {
         var items = filterOutItems(itemList);
         return A2(Array.get,
         ind - 1,
         Array.fromList(items));
      }();
   });
   _elm.Utils.SmartDisplay.values = {_op: _op
                                    ,getItemAt: getItemAt
                                    ,filterOutItems: filterOutItems
                                    ,filterOutSubitems: filterOutSubitems
                                    ,filterOutSubsubitems: filterOutSubsubitems
                                    ,filterOutSubitemsOfItem: filterOutSubitemsOfItem
                                    ,filterOutSubsubitemsOfSubitem: filterOutSubsubitemsOfSubitem
                                    ,filterOutLevel: filterOutLevel
                                    ,getLevelNumber: getLevelNumber
                                    ,getItemFromRoute: getItemFromRoute
                                    ,getSubitemFromRoute: getSubitemFromRoute
                                    ,getSubsubitemFromRoute: getSubsubitemFromRoute
                                    ,getdistributionAngles: getdistributionAngles
                                    ,getdistributePoints: getdistributePoints
                                    ,distribute: distribute
                                    ,drawLine: drawLine
                                    ,scaleItem: scaleItem
                                    ,getCircle: getCircle
                                    ,rgrad1: rgrad1
                                    ,lgrad1: lgrad1
                                    ,lgrad2: lgrad2
                                    ,getBlockBody: getBlockBody
                                    ,getFrameBody: getFrameBody
                                    ,getBlockHeading: getBlockHeading
                                    ,getVerticalDivider: getVerticalDivider
                                    ,getHorizontalDivider: getHorizontalDivider
                                    ,getRectangle: getRectangle
                                    ,bullet: bullet
                                    ,insertBullet: insertBullet
                                    ,subbullet: subbullet
                                    ,insertSubBullet: insertSubBullet
                                    ,checkbox: checkbox
                                    ,insertCheckbox: insertCheckbox
                                    ,getImage: getImage};
   return _elm.Utils.SmartDisplay.values;
};