Elm.Themes = Elm.Themes || {};
Elm.Themes.Layouts = Elm.Themes.Layouts || {};
Elm.Themes.Layouts.SideBar = Elm.Themes.Layouts.SideBar || {};
Elm.Themes.Layouts.SideBar.make = function (_elm) {
   "use strict";
   _elm.Themes = _elm.Themes || {};
   _elm.Themes.Layouts = _elm.Themes.Layouts || {};
   _elm.Themes.Layouts.SideBar = _elm.Themes.Layouts.SideBar || {};
   if (_elm.Themes.Layouts.SideBar.values)
   return _elm.Themes.Layouts.SideBar.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Themes.Layouts.SideBar";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Themes = Themes || {};
   Themes.Layouts = Themes.Layouts || {};
   Themes.Layouts.Default = Elm.Themes.Layouts.Default.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Types = Types || {};
   Types.Theme = Elm.Types.Theme.make(_elm);
   var _op = {};
   var changePalletteMapping = _L.fromArray([]);
   var defLayOut = Themes.Layouts.Default.defaultLayoutInfo;
   var sidebarLayout = Types.Theme.Layout({_: {}
                                          ,columns: _L.fromArray([{_: {}
                                                                  ,colAlign: Types.Theme.TopAlign
                                                                  ,id: 1
                                                                  ,placement: Graphics.Element.midRight
                                                                  ,width: 1}])
                                          ,inserts: _L.fromArray([{_: {}
                                                                  ,column: 1
                                                                  ,id: "title"}
                                                                 ,{_: {}
                                                                  ,column: 1
                                                                  ,id: "author"}
                                                                 ,{_: {}
                                                                  ,column: 1
                                                                  ,id: "toc"}])});
   var sideBarLayoutInfo = function (side) {
      return function () {
         switch (side.ctor)
         {case "LeftSidebar":
            return _U.replace([["leftSidebar"
                               ,sidebarLayout]],
              defLayOut);
            case "RightSidebar":
            return _U.replace([["rightSidebar"
                               ,sidebarLayout]],
              defLayOut);}
         _E.Case($moduleName,
         "between lines 25 and 27");
      }();
   };
   _elm.Themes.Layouts.SideBar.values = {_op: _op
                                        ,sidebarLayout: sidebarLayout
                                        ,defLayOut: defLayOut
                                        ,sideBarLayoutInfo: sideBarLayoutInfo
                                        ,changePalletteMapping: changePalletteMapping};
   return _elm.Themes.Layouts.SideBar.values;
};