Elm.Themes = Elm.Themes || {};
Elm.Themes.Styles = Elm.Themes.Styles || {};
Elm.Themes.Styles.Sober = Elm.Themes.Styles.Sober || {};
Elm.Themes.Styles.Sober.make = function (_elm) {
   "use strict";
   _elm.Themes = _elm.Themes || {};
   _elm.Themes.Styles = _elm.Themes.Styles || {};
   _elm.Themes.Styles.Sober = _elm.Themes.Styles.Sober || {};
   if (_elm.Themes.Styles.Sober.values)
   return _elm.Themes.Styles.Sober.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Themes.Styles.Sober";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Themes = Themes || {};
   Themes.MapStyling = Elm.Themes.MapStyling.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Types = Types || {};
   Types.Intermediate = Elm.Types.Intermediate.make(_elm);
   var Types = Types || {};
   Types.Theme = Elm.Types.Theme.make(_elm);
   var Utils = Utils || {};
   Utils.Theme = Elm.Utils.Theme.make(_elm);
   var _op = {};
   var defaultTheme = F4(function (fontFamily,
   normalFontSize,
   rawParentDict,
   mapping) {
      return function () {
         var slideBackground = {_: {}
                               ,normal: Types.Theme.SingleColored(Color.white)
                               ,section: Types.Theme.SingleColored(Color.white)
                               ,supportbin: Types.Theme.SingleColored(Color.white)
                               ,title: Types.Theme.SingleColored(A3(Utils.Theme.blendColors,
                               Color.white,
                               Color.grey,
                               0.2))};
         var updatedMapping = mapping;
         var greyBg = Types.Theme.SingleColored(Color.darkGrey);
         var darkRed = A3(Color.rgb,
         204,
         0,
         0);
         var darkRedBg = Types.Theme.SingleColored(darkRed);
         var defaultSinglePad = {_: {}
                                ,fillcolor: Types.Theme.Transparent
                                ,thickness: 1};
         var defaultPadding = {_: {}
                              ,bottom: defaultSinglePad
                              ,left: defaultSinglePad
                              ,right: defaultSinglePad
                              ,top: defaultSinglePad};
         var defaultBackground = Types.Theme.SingleColored(Color.white);
         var defaultTextStyle = {_: {}
                                ,bold: false
                                ,color: Color.black
                                ,height: normalFontSize
                                ,italic: false
                                ,line: Maybe.Nothing
                                ,typeface: fontFamily};
         var defaultText = {_: {}
                           ,align: Text.justified
                           ,style: defaultTextStyle};
         var defaultStyling = {_: {}
                              ,background: defaultBackground
                              ,border: Types.Theme.None
                              ,padding: defaultPadding
                              ,text: defaultText};
         var defaultSymbol = {_: {}
                             ,general: defaultStyling
                             ,symbolAlpha: 1
                             ,symbolFill: Types.Theme.Transparent
                             ,symbolShape: Types.Theme.Circle};
         var setBgFb = F7(function (st,
         fgc1,
         fgc2,
         fgalpha,
         bgc1,
         bgc2,
         bgalpha) {
            return A3(Utils.Theme.blendTextColor,
            A2(Utils.Theme.setTextColor,
            A3(Utils.Theme.blendBackground,
            A2(Utils.Theme.setBackGround,
            st,
            bgc1),
            bgc2,
            bgalpha),
            fgc1),
            fgc2,
            fgalpha);
         });
         var updateSymbolWithRaw = Utils.Theme.getUpdatedSymbolStyler(rawParentDict);
         var updateWithRaw = Utils.Theme.getUpdatedStyler(rawParentDict);
         var inner = updateWithRaw("Inner")(A2(Utils.Theme.setTextColor,
         defaultStyling,
         Color.black));
         var innerElements = updateWithRaw("InnerElements")(inner);
         var shadingTocPallette = {_: {}
                                  ,primary: A2(Utils.Theme.shadeTextColor,
                                  innerElements,
                                  0.4)
                                  ,quaternary: A2(Utils.Theme.shadeTextColor,
                                  innerElements,
                                  0.4)
                                  ,secondary: A2(Utils.Theme.shadeTextColor,
                                  innerElements,
                                  0.4)
                                  ,tertiary: A2(Utils.Theme.shadeTextColor,
                                  innerElements,
                                  0.4)};
         var framebox = A2(Utils.Theme.setBorder,
         innerElements,
         Types.Theme.Border(Graphics.Collage.solid(Color.black)));
         var normalText = updateWithRaw("TitleLike")(inner);
         var alertText = updateWithRaw("AlertText")(A3(Utils.Theme.blendTextColor,
         A2(Utils.Theme.setTextColor,
         normalText,
         darkRed),
         Color.grey,
         0.8));
         var highlightText = updateWithRaw("HighlightText")(Utils.Theme.setTextBold(normalText));
         var item = updateWithRaw("Item")(innerElements);
         var setFontSize = F2(function (symbolicSize,
         s) {
            return A2(Utils.Theme.setTextSize,
            s,
            A2(Utils.Theme.getRealFontSize,
            symbolicSize,
            normalFontSize));
         });
         var outer = updateWithRaw("Outer")(setFontSize(Types.Theme.Tiny)(A2(Utils.Theme.setTextColor,
         defaultStyling,
         Color.black)));
         var headFootPallette = {_: {}
                                ,primary: A7(setBgFb,
                                outer,
                                darkRed,
                                Color.black,
                                0.6,
                                greyBg,
                                Color.white,
                                0.3)
                                ,quaternary: A2(Utils.Theme.setTextColor,
                                A3(Utils.Theme.blendBackground,
                                A2(Utils.Theme.setBackGround,
                                outer,
                                greyBg),
                                Color.white,
                                5.0e-2),
                                darkRed)
                                ,secondary: A7(setBgFb,
                                outer,
                                darkRed,
                                Color.black,
                                0.7,
                                greyBg,
                                Color.white,
                                0.15)
                                ,tertiary: A7(setBgFb,
                                outer,
                                Color.grey,
                                Color.white,
                                0.1,
                                darkRedBg,
                                Color.black,
                                0.8)};
         var shadingPallette = {_: {}
                               ,primary: A2(Utils.Theme.shadeTextColor,
                               headFootPallette.primary,
                               0.4)
                               ,quaternary: A2(Utils.Theme.shadeTextColor,
                               headFootPallette.quaternary,
                               0.4)
                               ,secondary: A2(Utils.Theme.shadeTextColor,
                               headFootPallette.secondary,
                               0.4)
                               ,tertiary: A2(Utils.Theme.shadeTextColor,
                               headFootPallette.tertiary,
                               0.4)};
         var sidebarPallette = {_: {}
                               ,primary: A3(Utils.Theme.blendTextColor,
                               A2(Utils.Theme.setTextColor,
                               inner,
                               darkRed),
                               Color.black,
                               0.1)
                               ,quaternary: A3(Utils.Theme.blendTextColor,
                               A2(Utils.Theme.setTextColor,
                               outer,
                               Color.grey),
                               Color.white,
                               0.1)
                               ,secondary: A2(Utils.Theme.setTextColor,
                               outer,
                               Color.white)
                               ,tertiary: A3(Utils.Theme.blendTextColor,
                               A2(Utils.Theme.setTextColor,
                               outer,
                               darkRed),
                               Color.black,
                               0.5)};
         var shadingSidebarPallette = {_: {}
                                      ,primary: A2(Utils.Theme.shadeTextColor,
                                      sidebarPallette.primary,
                                      0.4)
                                      ,quaternary: A2(Utils.Theme.shadeTextColor,
                                      sidebarPallette.quaternary,
                                      0.4)
                                      ,secondary: A2(Utils.Theme.shadeTextColor,
                                      sidebarPallette.secondary,
                                      0.4)
                                      ,tertiary: A2(Utils.Theme.shadeTextColor,
                                      sidebarPallette.tertiary,
                                      0.4)};
         var sidebar = A2(Utils.Theme.setTextColor,
         A3(Utils.Theme.blendBackground,
         A2(Utils.Theme.setBackGround,
         outer,
         greyBg),
         Color.white,
         0.15),
         darkRed);
         var styleLists = {_: {}
                          ,inner: _L.fromArray([{ctor: "_Tuple2"
                                                ,_0: {ctor: "_Tuple2"
                                                     ,_0: "framebox"
                                                     ,_1: "none"}
                                                ,_1: framebox}])
                          ,outer: _L.fromArray([{ctor: "_Tuple2"
                                                ,_0: {ctor: "_Tuple2"
                                                     ,_0: "leftSidebar"
                                                     ,_1: "none"}
                                                ,_1: sidebar}
                                               ,{ctor: "_Tuple2"
                                                ,_0: {ctor: "_Tuple2"
                                                     ,_0: "rightSidebar"
                                                     ,_1: "none"}
                                                ,_1: sidebar}])
                          ,symbol: _L.fromArray([])};
         var outerElements = updateWithRaw("OuterElements")(setFontSize(Types.Theme.Small)(A2(Utils.Theme.setTextAlign,
         outer,
         Text.centered)));
         var generalSymbol = {_: {}
                             ,general: A2(Utils.Theme.setBackGround,
                             outerElements,
                             Types.Theme.Transparent)
                             ,symbolAlpha: 0.7
                             ,symbolFill: Types.Theme.Transparent
                             ,symbolShape: Types.Theme.Circle};
         var shadedGeneralSymbol = A2(Utils.Theme.setSymbolAlpha,
         generalSymbol,
         0.2);
         var miniframeSymbol = {_: {}
                               ,general: A2(Utils.Theme.setBackGround,
                               outerElements,
                               Types.Theme.Transparent)
                               ,symbolAlpha: 1
                               ,symbolFill: Types.Theme.SingleColored(Color.green)
                               ,symbolShape: Types.Theme.Circle};
         var shadedMiniframeSymbol = A2(Utils.Theme.setSymbolAlpha,
         miniframeSymbol,
         0.5);
         var titleLike = updateWithRaw("TitleLike")(setFontSize(Types.Theme.Large)(A2(Utils.Theme.setTextColor,
         A3(Utils.Theme.blendBackground,
         A2(Utils.Theme.setBackGround,
         outer,
         greyBg),
         Color.white,
         0.1),
         darkRed)));
         var subitem = updateWithRaw("Subitem")(setFontSize(Types.Theme.Small)(item));
         var subsubitem = updateWithRaw("Subsubitem")(setFontSize(Types.Theme.FootnoteSize)(subitem));
         var itemProjection = updateSymbolWithRaw("ItemProjection")({_: {}
                                                                    ,general: setFontSize(Types.Theme.Tiny)(A2(Utils.Theme.setTextColor,
                                                                    defaultStyling,
                                                                    Color.white))
                                                                    ,symbolAlpha: 1
                                                                    ,symbolFill: Types.Theme.SingleColored(item.text.style.color)
                                                                    ,symbolShape: Types.Theme.Triangle});
         var subitemProjection = updateSymbolWithRaw("SubitemProjection")(A2(Utils.Theme.setSymbolShape,
         itemProjection,
         Types.Theme.Square));
         var subsubitemProjection = updateSymbolWithRaw("SubsubitemProjection")(A2(Utils.Theme.setSymbolShape,
         itemProjection,
         Types.Theme.Circle));
         var sectionProjection = itemProjection;
         var shadedSectionProjection = A2(Utils.Theme.setSymbolAlpha,
         sectionProjection,
         0.5);
         var button = {_: {}
                      ,general: setFontSize(Types.Theme.Tiny)(A2(Utils.Theme.setTextColor,
                      innerElements,
                      Color.white))
                      ,symbolAlpha: 0.7
                      ,symbolFill: function (_) {
                         return _.background;
                      }(A3(Utils.Theme.blendBackground,
                      innerElements,
                      innerElements.text.style.color,
                      0.4))
                      ,symbolShape: Types.Theme.Rectangle};
         var symbolBoard = {_: {}
                           ,button: button
                           ,generalSymbol: generalSymbol
                           ,miniframeSymbol: miniframeSymbol
                           ,sectionProjection: sectionProjection
                           ,shadedGeneralSymbol: shadedGeneralSymbol
                           ,shadedMiniframeSymbol: shadedMiniframeSymbol
                           ,shadedSectionProjection: shadedSectionProjection};
         var styleGuide = {_: {}
                          ,alertText: alertText
                          ,headFootPallette: headFootPallette
                          ,highlightText: highlightText
                          ,inner: inner
                          ,innerElements: innerElements
                          ,item: item
                          ,itemProjection: itemProjection
                          ,normalText: normalText
                          ,outer: outer
                          ,outerElements: outerElements
                          ,shadingPallette: shadingPallette
                          ,shadingSidebarPallette: shadingSidebarPallette
                          ,shadingTocPallette: shadingTocPallette
                          ,sidebarPallette: sidebarPallette
                          ,subitem: subitem
                          ,subitemProjection: subitemProjection
                          ,subsubitem: subsubitem
                          ,subsubitemProjection: subsubitemProjection
                          ,symbolBoard: symbolBoard
                          ,titleLike: titleLike};
         return Utils.Theme.updateStyleInfo(styleLists)(A3(Themes.MapStyling.toStyleInfo,
         styleGuide,
         updatedMapping,
         slideBackground));
      }();
   });
   _elm.Themes.Styles.Sober.values = {_op: _op
                                     ,defaultTheme: defaultTheme};
   return _elm.Themes.Styles.Sober.values;
};