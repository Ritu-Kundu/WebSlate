var SlateParser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { presentation: peg$parsepresentation },
        peg$startRuleFunction  = peg$parsepresentation,

        peg$c0 = peg$FAILED,
        peg$c1 = function(ps) {return ps;},
        peg$c2 = null,
        peg$c3 = function(aspec, ispec, cs) { var dummyAppear = { themes: defThemes
                         , guidingCanvas: guidingCanvas
                         , guidingColors: guidingColors
                         , guidingFonts: guidingFonts
                         , templateCanvas: templateCanvas
                         , templateColors: templateColors
                         , templateFonts: templateFonts
                         , templateLayout: templateLayout
                         };
              var dummyInfo = makeInfo([]);
              var pInfo = (ispec != null) ? ispec : dummyInfo
              pInfo["sections"] = sectionList;
              return { appearanceInfo:((aspec != null) ? aspec : dummyAppear)
                    , presInfo:  pInfo
                    , supportbin: supportbinList
                    , quizes: quizList
                    , content: cs   
                    };
            },
        peg$c4 = [],
        peg$c5 = function(ae) {return       { themes: defThemes
                         , guidingCanvas: guidingCanvas
                         , guidingColors: guidingColors
                         , guidingFonts: guidingFonts
                         , templateCanvas: templateCanvas
                         , templateColors: templateColors
                         , templateFonts: templateFonts
                         , templateLayout: templateLayout
                         };
           },
        peg$c6 = function(t) { defThemes.style = t;
              return "";
            },
        peg$c7 = function(f) { fonts = f.split(",");
              defThemes.font = fonts;
              return "";
            },
        peg$c8 = function(t) { defThemes.layout = t;
              return "";
            },
        peg$c9 = "default",
        peg$c10 = { type: "literal", value: "default", description: "\"default\"" },
        peg$c11 = "sober",
        peg$c12 = { type: "literal", value: "sober", description: "\"sober\"" },
        peg$c13 = "striking",
        peg$c14 = { type: "literal", value: "striking", description: "\"striking\"" },
        peg$c15 = "infolines",
        peg$c16 = { type: "literal", value: "infolines", description: "\"infolines\"" },
        peg$c17 = "leftsidebar",
        peg$c18 = { type: "literal", value: "leftsidebar", description: "\"leftsidebar\"" },
        peg$c19 = "rightsidebar",
        peg$c20 = { type: "literal", value: "rightsidebar", description: "\"rightsidebar\"" },
        peg$c21 = "split",
        peg$c22 = { type: "literal", value: "split", description: "\"split\"" },
        peg$c23 = "tree",
        peg$c24 = { type: "literal", value: "tree", description: "\"tree\"" },
        peg$c25 = "miniframes",
        peg$c26 = { type: "literal", value: "miniframes", description: "\"miniframes\"" },
        peg$c27 = "author-title",
        peg$c28 = { type: "literal", value: "author-title", description: "\"author-title\"" },
        peg$c29 = "institute-title",
        peg$c30 = { type: "literal", value: "institute-title", description: "\"institute-title\"" },
        peg$c31 = "author-institute-title",
        peg$c32 = { type: "literal", value: "author-institute-title", description: "\"author-institute-title\"" },
        peg$c33 = "no-foot",
        peg$c34 = { type: "literal", value: "no-foot", description: "\"no-foot\"" },
        peg$c35 = function(op) {return ("miniframes:" + op.replace("-",""));},
        peg$c36 = function() {return "miniframes:nofoot"},
        peg$c37 = function(cn, lc) { templateLayout.push( { id:cn
                     , layoutContent: lc
                     });
              return "";
            },
        peg$c38 = function(ins) { return [{ width: "1"
                     , columnAlign: "c"
                     , inColumnAlign: "center"
                     , columnContent: ins
                     }]
            },
        peg$c39 = function(lcc) {return lcc;},
        peg$c40 = function(co, w, ins) { return { width: w
                     , columnAlign: (co != null) ? co.align : "c"
                     , inColumnAlign: (co != null) ? co.placement : "center"
                     , columnContent: ins
                     }
            },
        peg$c41 = function(si) {return si.replace(" ", "");},
        peg$c42 = "navigation vertical",
        peg$c43 = { type: "literal", value: "navigation vertical", description: "\"navigation vertical\"" },
        peg$c44 = "navigation",
        peg$c45 = { type: "literal", value: "navigation", description: "\"navigation\"" },
        peg$c46 = "section navigation vertical",
        peg$c47 = { type: "literal", value: "section navigation vertical", description: "\"section navigation vertical\"" },
        peg$c48 = "section navigation",
        peg$c49 = { type: "literal", value: "section navigation", description: "\"section navigation\"" },
        peg$c50 = "subsection navigation vertical",
        peg$c51 = { type: "literal", value: "subsection navigation vertical", description: "\"subsection navigation vertical\"" },
        peg$c52 = "subsection navigation",
        peg$c53 = { type: "literal", value: "subsection navigation", description: "\"subsection navigation\"" },
        peg$c54 = "tree section",
        peg$c55 = { type: "literal", value: "tree section", description: "\"tree section\"" },
        peg$c56 = "tree subsection",
        peg$c57 = { type: "literal", value: "tree subsection", description: "\"tree subsection\"" },
        peg$c58 = "section",
        peg$c59 = { type: "literal", value: "section", description: "\"section\"" },
        peg$c60 = "subsection",
        peg$c61 = { type: "literal", value: "subsection", description: "\"subsection\"" },
        peg$c62 = "subsubsection",
        peg$c63 = { type: "literal", value: "subsubsection", description: "\"subsubsection\"" },
        peg$c64 = "logo",
        peg$c65 = { type: "literal", value: "logo", description: "\"logo\"" },
        peg$c66 = "slide number and total",
        peg$c67 = { type: "literal", value: "slide number and total", description: "\"slide number and total\"" },
        peg$c68 = "slide number",
        peg$c69 = { type: "literal", value: "slide number", description: "\"slide number\"" },
        peg$c70 = "title",
        peg$c71 = { type: "literal", value: "title", description: "\"title\"" },
        peg$c72 = "subtitle",
        peg$c73 = { type: "literal", value: "subtitle", description: "\"subtitle\"" },
        peg$c74 = "author",
        peg$c75 = { type: "literal", value: "author", description: "\"author\"" },
        peg$c76 = "institute",
        peg$c77 = { type: "literal", value: "institute", description: "\"institute\"" },
        peg$c78 = "date",
        peg$c79 = { type: "literal", value: "date", description: "\"date\"" },
        peg$c80 = "image",
        peg$c81 = { type: "literal", value: "image", description: "\"image\"" },
        peg$c82 = "slide navigation",
        peg$c83 = { type: "literal", value: "slide navigation", description: "\"slide navigation\"" },
        peg$c84 = "back forward",
        peg$c85 = { type: "literal", value: "back forward", description: "\"back forward\"" },
        peg$c86 = "support",
        peg$c87 = { type: "literal", value: "support", description: "\"support\"" },
        peg$c88 = "zoom",
        peg$c89 = { type: "literal", value: "zoom", description: "\"zoom\"" },
        peg$c90 = "quiz",
        peg$c91 = { type: "literal", value: "quiz", description: "\"quiz\"" },
        peg$c92 = "scribble",
        peg$c93 = { type: "literal", value: "scribble", description: "\"scribble\"" },
        peg$c94 = "toc",
        peg$c95 = { type: "literal", value: "toc", description: "\"toc\"" },
        peg$c96 = function(op) {if (op!=null)
            {return ("toc:" + op);}
             return ("toc:");
           },
        peg$c97 = function(to, rest) {if (rest.length == 0)
              {return to;}
             return (to + "-" + rest.join("-"));
            },
        peg$c98 = function(t) {return t;},
        peg$c99 = function(o, v) { return (o+"="+v);},
        peg$c100 = function(o, v) { return (o+"="+v.join(""));},
        peg$c101 = "headline",
        peg$c102 = { type: "literal", value: "headline", description: "\"headline\"" },
        peg$c103 = "footline",
        peg$c104 = { type: "literal", value: "footline", description: "\"footline\"" },
        peg$c105 = "right sidebar",
        peg$c106 = { type: "literal", value: "right sidebar", description: "\"right sidebar\"" },
        peg$c107 = "left sidebar",
        peg$c108 = { type: "literal", value: "left sidebar", description: "\"left sidebar\"" },
        peg$c109 = "navigational symbols",
        peg$c110 = { type: "literal", value: "navigational symbols", description: "\"navigational symbols\"" },
        peg$c111 = "modechange symbols",
        peg$c112 = { type: "literal", value: "modechange symbols", description: "\"modechange symbols\"" },
        peg$c113 = "title slide",
        peg$c114 = { type: "literal", value: "title slide", description: "\"title slide\"" },
        peg$c115 = "toc slide",
        peg$c116 = { type: "literal", value: "toc slide", description: "\"toc slide\"" },
        peg$c117 = "atbeginsection slide",
        peg$c118 = { type: "literal", value: "atbeginsection slide", description: "\"atbeginsection slide\"" },
        peg$c119 = "atbeginsubsection slide",
        peg$c120 = { type: "literal", value: "atbeginsubsection slide", description: "\"atbeginsubsection slide\"" },
        peg$c121 = function(c) {return c.replace(" ", "");},
        peg$c122 = function(tn, co, cad) { templateColors.push( { id:tn.id
                     , container: tn.container
                     , colorInfo: co
                     , options: (cad!=null)? cad: []
                     });
              return "";
            },
        peg$c123 = function(gn, co, cad) { guidingColors.push( { id:gn.id
                     , container: gn.container
                     , colorInfo: co
                     , options: (cad!=null)? cad: []
                     });
              return "";
            },
        peg$c124 = function(co, rest) {return makeColorOptions(co,rest);},
        peg$c125 = function(o, c) { return [o,c];},
        peg$c126 = function(o, l, t, r, b) { var left = (l!=null)?l:"";
              var top = (t!=null)?t:"";
              var right = (r!=null)?r:"";
              var bottom = (b!=null)?b:"";
              return [o,left, top, right, bottom];},
        peg$c127 = function(fo, rest) { rest.push(fo);
             return rest;
            },
        peg$c128 = function(c) {return c;},
        peg$c129 = function(o, v) {return {option: o
                    ,value: v
                    }  
            },
        peg$c130 = function(tn, co, cad) { templateCanvas.push( { id:tn.id
                     , container: tn.container
                     , canvas: co
                     , options: (cad!=null)? cad: []
                     });
              return "";
            },
        peg$c131 = function(gn, co, cad) { guidingCanvas.push( { id:gn.id
                     , container: gn.container
                     , canvas: co
                     , options: (cad!=null)? cad: []
                     });
              return "";
            },
        peg$c132 = function(co, rest) {return makeCanvasOptions(co,rest);},
        peg$c133 = function(o, size, opt) { var shape = (opt!=null)? opt[1] : "";
              return [o,size,shape];
            },
        peg$c134 = function(fo) { return fo;},
        peg$c135 = function(tn, fo) { templateFonts.push( { id:tn.id
                     , container: tn.container
                     , fontInfo: fo
                     });
              return "";
            },
        peg$c136 = function(tn, fo) { guidingFonts.push( { id:gn.id
                     , container: gn.container
                     , fontInfo: fo
                     });
              return "";
            },
        peg$c137 = function(co, rest) {return makeFontOptions(co,rest);},
        peg$c138 = function(o, v) { return [o,v];},
        peg$c139 = function(t, op) { return { id: t.replace(" ","")
                     , container: (op!=null)?op[3]:"none"
                     }
            },
        peg$c140 = "dimmed navigational symbols",
        peg$c141 = { type: "literal", value: "dimmed navigational symbols", description: "\"dimmed navigational symbols\"" },
        peg$c142 = "dimmed modechange symbols",
        peg$c143 = { type: "literal", value: "dimmed modechange symbols", description: "\"dimmed modechange symbols\"" },
        peg$c144 = "current section",
        peg$c145 = { type: "literal", value: "current section", description: "\"current section\"" },
        peg$c146 = "current subsection",
        peg$c147 = { type: "literal", value: "current subsection", description: "\"current subsection\"" },
        peg$c148 = "other section",
        peg$c149 = { type: "literal", value: "other section", description: "\"other section\"" },
        peg$c150 = "other subsection",
        peg$c151 = { type: "literal", value: "other subsection", description: "\"other subsection\"" },
        peg$c152 = "section projection",
        peg$c153 = { type: "literal", value: "section projection", description: "\"section projection\"" },
        peg$c154 = "shaded section projection",
        peg$c155 = { type: "literal", value: "shaded section projection", description: "\"shaded section projection\"" },
        peg$c156 = "subsection projection",
        peg$c157 = { type: "literal", value: "subsection projection", description: "\"subsection projection\"" },
        peg$c158 = "shaded subsection projection",
        peg$c159 = { type: "literal", value: "shaded subsection projection", description: "\"shaded subsection projection\"" },
        peg$c160 = "subsubsection projection",
        peg$c161 = { type: "literal", value: "subsubsection projection", description: "\"subsubsection projection\"" },
        peg$c162 = "shaded subsubsection projection",
        peg$c163 = { type: "literal", value: "shaded subsubsection projection", description: "\"shaded subsubsection projection\"" },
        peg$c164 = "itemize item projection",
        peg$c165 = { type: "literal", value: "itemize item projection", description: "\"itemize item projection\"" },
        peg$c166 = "itemize subitem projection",
        peg$c167 = { type: "literal", value: "itemize subitem projection", description: "\"itemize subitem projection\"" },
        peg$c168 = "itemize subsubitem projection",
        peg$c169 = { type: "literal", value: "itemize subsubitem projection", description: "\"itemize subsubitem projection\"" },
        peg$c170 = "enumerate item projection",
        peg$c171 = { type: "literal", value: "enumerate item projection", description: "\"enumerate item projection\"" },
        peg$c172 = "enumerate subitem projection",
        peg$c173 = { type: "literal", value: "enumerate subitem projection", description: "\"enumerate subitem projection\"" },
        peg$c174 = "enumerate subsubitem projection",
        peg$c175 = { type: "literal", value: "enumerate subsubitem projection", description: "\"enumerate subsubitem projection\"" },
        peg$c176 = "description item projection",
        peg$c177 = { type: "literal", value: "description item projection", description: "\"description item projection\"" },
        peg$c178 = "description subitem projection",
        peg$c179 = { type: "literal", value: "description subitem projection", description: "\"description subitem projection\"" },
        peg$c180 = "description subsubitem projection",
        peg$c181 = { type: "literal", value: "description subsubitem projection", description: "\"description subsubitem projection\"" },
        peg$c182 = "title graphic",
        peg$c183 = { type: "literal", value: "title graphic", description: "\"title graphic\"" },
        peg$c184 = "section graphic",
        peg$c185 = { type: "literal", value: "section graphic", description: "\"section graphic\"" },
        peg$c186 = "subsection graphic",
        peg$c187 = { type: "literal", value: "subsection graphic", description: "\"subsection graphic\"" },
        peg$c188 = "slide title",
        peg$c189 = { type: "literal", value: "slide title", description: "\"slide title\"" },
        peg$c190 = "slide subtitle",
        peg$c191 = { type: "literal", value: "slide subtitle", description: "\"slide subtitle\"" },
        peg$c192 = "shaded section",
        peg$c193 = { type: "literal", value: "shaded section", description: "\"shaded section\"" },
        peg$c194 = "shaded subsection",
        peg$c195 = { type: "literal", value: "shaded subsection", description: "\"shaded subsection\"" },
        peg$c196 = "shaded subsubsection",
        peg$c197 = { type: "literal", value: "shaded subsubsection", description: "\"shaded subsubsection\"" },
        peg$c198 = "block",
        peg$c199 = { type: "literal", value: "block", description: "\"block\"" },
        peg$c200 = "framebox",
        peg$c201 = { type: "literal", value: "framebox", description: "\"framebox\"" },
        peg$c202 = "imagebox",
        peg$c203 = { type: "literal", value: "imagebox", description: "\"imagebox\"" },
        peg$c204 = "alertedblock",
        peg$c205 = { type: "literal", value: "alertedblock", description: "\"alertedblock\"" },
        peg$c206 = "block title",
        peg$c207 = { type: "literal", value: "block title", description: "\"block title\"" },
        peg$c208 = "normal",
        peg$c209 = { type: "literal", value: "normal", description: "\"normal\"" },
        peg$c210 = "highlight",
        peg$c211 = { type: "literal", value: "highlight", description: "\"highlight\"" },
        peg$c212 = "alert",
        peg$c213 = { type: "literal", value: "alert", description: "\"alert\"" },
        peg$c214 = "itemize item",
        peg$c215 = { type: "literal", value: "itemize item", description: "\"itemize item\"" },
        peg$c216 = "itemize subitem",
        peg$c217 = { type: "literal", value: "itemize subitem", description: "\"itemize subitem\"" },
        peg$c218 = "itemize subsubitem",
        peg$c219 = { type: "literal", value: "itemize subsubitem", description: "\"itemize subsubitem\"" },
        peg$c220 = "enumerate item",
        peg$c221 = { type: "literal", value: "enumerate item", description: "\"enumerate item\"" },
        peg$c222 = "enumerate subitem",
        peg$c223 = { type: "literal", value: "enumerate subitem", description: "\"enumerate subitem\"" },
        peg$c224 = "enumerate subsubitem",
        peg$c225 = { type: "literal", value: "enumerate subsubitem", description: "\"enumerate subsubitem\"" },
        peg$c226 = "description item",
        peg$c227 = { type: "literal", value: "description item", description: "\"description item\"" },
        peg$c228 = "description subitem",
        peg$c229 = { type: "literal", value: "description subitem", description: "\"description subitem\"" },
        peg$c230 = "description subsubitem",
        peg$c231 = { type: "literal", value: "description subsubitem", description: "\"description subsubitem\"" },
        peg$c232 = "caption",
        peg$c233 = { type: "literal", value: "caption", description: "\"caption\"" },
        peg$c234 = "caption nameandnumber",
        peg$c235 = { type: "literal", value: "caption nameandnumber", description: "\"caption nameandnumber\"" },
        peg$c236 = "sidebar",
        peg$c237 = { type: "literal", value: "sidebar", description: "\"sidebar\"" },
        peg$c238 = function(g) { return { id: g.replace(" ","")
                     , container: "none"
                     }
            },
        peg$c239 = "Outer Elements",
        peg$c240 = { type: "literal", value: "Outer Elements", description: "\"Outer Elements\"" },
        peg$c241 = "Inner Elements",
        peg$c242 = { type: "literal", value: "Inner Elements", description: "\"Inner Elements\"" },
        peg$c243 = "Outer",
        peg$c244 = { type: "literal", value: "Outer", description: "\"Outer\"" },
        peg$c245 = "Inner",
        peg$c246 = { type: "literal", value: "Inner", description: "\"Inner\"" },
        peg$c247 = "Title Like",
        peg$c248 = { type: "literal", value: "Title Like", description: "\"Title Like\"" },
        peg$c249 = "Normal Text",
        peg$c250 = { type: "literal", value: "Normal Text", description: "\"Normal Text\"" },
        peg$c251 = "Alert Text",
        peg$c252 = { type: "literal", value: "Alert Text", description: "\"Alert Text\"" },
        peg$c253 = "Highlight Text",
        peg$c254 = { type: "literal", value: "Highlight Text", description: "\"Highlight Text\"" },
        peg$c255 = "Item",
        peg$c256 = { type: "literal", value: "Item", description: "\"Item\"" },
        peg$c257 = "Subitem",
        peg$c258 = { type: "literal", value: "Subitem", description: "\"Subitem\"" },
        peg$c259 = "Subsubitem",
        peg$c260 = { type: "literal", value: "Subsubitem", description: "\"Subsubitem\"" },
        peg$c261 = "Item Projection",
        peg$c262 = { type: "literal", value: "Item Projection", description: "\"Item Projection\"" },
        peg$c263 = "Subitem Projection",
        peg$c264 = { type: "literal", value: "Subitem Projection", description: "\"Subitem Projection\"" },
        peg$c265 = "Subsubitem Projection",
        peg$c266 = { type: "literal", value: "Subsubitem Projection", description: "\"Subsubitem Projection\"" },
        peg$c267 = function(i) {return makeInfo(i);},
        peg$c268 = function(e) {return e;},
        peg$c269 = function(e, t) {return [e,t];},
        peg$c270 = function(s) {return [].concat.apply([], s);},
        peg$c271 = function(s) {return s;},
        peg$c272 = function(short, long) { sectionNum++;
              subsectionNum=0;
              subsubsectionNum=0;
              sectionList.push({ id: sectionNum.toString()
                               , shortName: short
                               , longName: (long!=null)?long:short
                               });
              return "";
            },
        peg$c273 = function(short, long) { subsectionNum++;
              subsubsectionNum=0;
              sectionList.push({ id: sectionNum.toString() 
                                            +"."+subsectionNum.toString()
                               , shortName: short
                               , longName: (long!=null)?long:short
                               });
              return "";
            },
        peg$c274 = function(short, long) { subsubsectionNum++;
              sectionList.push({ id: sectionNum.toString() 
                                            +"."+subsectionNum.toString()
                                            +"."+subsubsectionNum.toString()
                               , shortName: short
                               , longName: (long!=null)?long:short
                               });
              return "";
            },
        peg$c275 = function(so, st, sub, sc) { slideNum++;
              var tempMaxTick = maxTick;
              maxTick =0;
              var secId = (sectionNum!=0)?sectionNum.toString():"";
              var subsecId = (subsectionNum!=0)?"."+subsectionNum.toString():"";
              var subsubsecId = (subsubsectionNum!=0)?
                                  "."+subsubsectionNum.toString():"";
              return { id:slideNum
                    , partOf: secId +subsecId+subsubsecId
                    , maxTick: tempMaxTick
                    , type: (so != null && so.plain == "true") ? 
                                                slideType.plain :slideType.normal
                    , title:  (st != null) ? st : ""
                    , subtitle:  (sub != null) ? sub : ""
                    , supportbin: (so != null) ? so.supportbin : ""
                    , quiz: (so != null) ? so.quiz : ""
                    , slidecontent: sc   
                    }
            },
        peg$c276 = function(so, rest) {return makeSlideOptions(so,rest);},
        peg$c277 = function(o, v) {return [o,v];},
        peg$c278 = function(se) { return [{ width: "1"
                     , columnAlign: "c"
                     , inColumnAlign: "center"
                     , columnContent: se
                     }]
            },
        peg$c279 = function(cc) {return cc;},
        peg$c280 = function(co, w, se) { return { width: w
                     , columnAlign: (co != null) ? co.align : "c"
                     , inColumnAlign: (co != null) ? co.placement : "center"
                     , columnContent: se
                     }
            },
        peg$c281 = function(co, rest) {return makeColumnOptions(co,rest);},
        peg$c282 = function(bn, a, t, s, en) { if (bn != en)
              { error("begin doesnt match with end \n begin:" + bn + ", end:" +en); }
              return { type: "block"
                     , isAlerted: (bn == "block")? "false" : "true"
                     , title: (t!=null) ? t : ""
                     , body: s
                     , animationInfo: a
                     }
            },
        peg$c283 = function(a, s) { return { type: "framebox"
                     , body: s
                     , animationInfo: a
                     }
            },
        peg$c284 = function(a, io, f, c) { return { type: "imagebox"
                     , caption: (c!=null) ? c : ""
                     , imageFile: f
                     , imageOptions: (io!=null)?io:[]
                     , animationInfo: a
                     }
            },
        peg$c285 = function(io, rest) { rest.push(io);
              return rest; },
        peg$c286 = function(i) {return i;},
        peg$c287 = function(bl, a, li, el) { if (bl != el) 
              { error("List types begin and end don't match.\n begin type:" + bl + ",  end type:" + el);}
              return { type: "slateList"
                     , listType: bl
                     , items: li
                     , animationInfo: a
                     }
            },
        peg$c288 = function(bl) { listLevel++;
              if (listLevel > 3)
              {error("Nesting of list can't be more than 3 levels");}
              return bl;
            },
        peg$c289 = function(el) { listLevel--;
              return el;
            },
        peg$c290 = function(a, lo, s) {return { type: "simpleItem"
                    , text: (s != null)? s :[] 
                    , animationInfo: a
                    , listOption: lo
                    }
            },
        peg$c291 = function(st, a, li) {   smartItemNum = 0;
                smartSubItemNum = 0;
                smartSubsubItemNum = 0;
              return { type: "smartList"
                     , sdType: st
                     , items: li
                     , animationInfo: a
                     }
            },
        peg$c292 = function(i, s) {return { id: i
                    , body: (s != null)? s :""
                    }
            },
        peg$c293 = function() { ++smartItemNum;
              smartSubItemNum = 0;
              smartSubsubItemNum = 0;
              return (smartItemNum.toString());
            },
        peg$c294 = function() { ++smartSubItemNum;
              smartSubsubItemNum = 0;
              return (smartItemNum.toString() 
                     +"."+smartSubItemNum.toString());
            },
        peg$c295 = function() { ++smartSubsubItemNum;
              return (smartItemNum.toString() 
                     +"."+smartSubItemNum.toString()
                     +"."+smartSubsubItemNum.toString());
            },
        peg$c296 = function(s) { return { animtype: "noAnimation"
                     , text: s
                     , type: "simpleTextbox"
                     }
            },
        peg$c297 = function(com, a, s) { return { animtype: com
                       , text: s
                       , animation: a
                       , type: "simpleTextbox"
                       }
              },
        peg$c298 = function(a, f, s) { return { animtype: "alt"
                       , text: f
                       , altText: s
                       , animation: a
                       , type: "simpleTextbox"
                       }
              },
        peg$c299 = function(a, f, s, t) { return { animtype: "temporal"
                       , beforeText: f
                       , text: s
                       , afterText: t
                       , animation: a
                       , type: "simpleTextbox"
                       }
              },
        peg$c300 = function() {return "only";},
        peg$c301 = function() {return "visible";},
        peg$c302 = function() {return "invisible";},
        peg$c303 = function() {return "alt";},
        peg$c304 = function() {return "temporal";},
        peg$c305 = function(s) {return { type: "normal"
                              , stringText: s
                              }                    
                      },
        peg$c306 = function(com, a, tex) {return { type: com
                              , stringText: tex
                              , animation: a
                              }                    
                      },
        peg$c307 = function() {return "alert";},
        peg$c308 = function() {return "highlight";},
        peg$c309 = function() {return "italic";},
        peg$c310 = function() {return "bold";},
        peg$c311 = function() {return "underline";},
        peg$c312 = function(l, se) { supportbinList.push({supportbinId:l
                                  , content: se
                                  });
            },
        peg$c313 = function(l, q, ca, ao, ex) { quizList.push({id:l
                            , qtype: (q.type!=null)?q.type:"simple"
                            , question: q.ques
                            , options: ao
                            , correctAns: (ca!=null)?ca:[]
                            , explanation: (ex!=null)?ex:""
                    });
            },
        peg$c314 = function(q, qt) {return {ques:q, type:qt};},
        peg$c315 = function(s) {return s.split(",");},
        peg$c316 = function(s, t) {return {option:s, isCorrect:t};},
        peg$c317 = function(a, b) {return {animation:a, covered:(b!=null)?true:false}},
        peg$c318 = function(a) {return a;},
        peg$c319 = function(a, b) {maxTick=(a>maxTick)?a:maxTick;
                                                   maxTick=(b>maxTick)?b:maxTick;
                                                   },
        peg$c320 = function(a) {maxTick=(a>maxTick)?a:maxTick;},
        peg$c321 = function(f) {return f;},
        peg$c322 = "rgb",
        peg$c323 = { type: "literal", value: "rgb", description: "\"rgb\"" },
        peg$c324 = "hsl",
        peg$c325 = { type: "literal", value: "hsl", description: "\"hsl\"" },
        peg$c326 = "rgba",
        peg$c327 = { type: "literal", value: "rgba", description: "\"rgba\"" },
        peg$c328 = "hsla",
        peg$c329 = { type: "literal", value: "hsla", description: "\"hsla\"" },
        peg$c330 = "red",
        peg$c331 = { type: "literal", value: "red", description: "\"red\"" },
        peg$c332 = "orange",
        peg$c333 = { type: "literal", value: "orange", description: "\"orange\"" },
        peg$c334 = "yellow",
        peg$c335 = { type: "literal", value: "yellow", description: "\"yellow\"" },
        peg$c336 = "green",
        peg$c337 = { type: "literal", value: "green", description: "\"green\"" },
        peg$c338 = "blue",
        peg$c339 = { type: "literal", value: "blue", description: "\"blue\"" },
        peg$c340 = "purple",
        peg$c341 = { type: "literal", value: "purple", description: "\"purple\"" },
        peg$c342 = "brown",
        peg$c343 = { type: "literal", value: "brown", description: "\"brown\"" },
        peg$c344 = "lightred",
        peg$c345 = { type: "literal", value: "lightred", description: "\"lightred\"" },
        peg$c346 = "lightorange",
        peg$c347 = { type: "literal", value: "lightorange", description: "\"lightorange\"" },
        peg$c348 = "lightyellow",
        peg$c349 = { type: "literal", value: "lightyellow", description: "\"lightyellow\"" },
        peg$c350 = "lightgreen",
        peg$c351 = { type: "literal", value: "lightgreen", description: "\"lightgreen\"" },
        peg$c352 = "lightblue",
        peg$c353 = { type: "literal", value: "lightblue", description: "\"lightblue\"" },
        peg$c354 = "lightbrown",
        peg$c355 = { type: "literal", value: "lightbrown", description: "\"lightbrown\"" },
        peg$c356 = "darkred",
        peg$c357 = { type: "literal", value: "darkred", description: "\"darkred\"" },
        peg$c358 = "darkorange",
        peg$c359 = { type: "literal", value: "darkorange", description: "\"darkorange\"" },
        peg$c360 = "darkyellow",
        peg$c361 = { type: "literal", value: "darkyellow", description: "\"darkyellow\"" },
        peg$c362 = "darkgreen",
        peg$c363 = { type: "literal", value: "darkgreen", description: "\"darkgreen\"" },
        peg$c364 = "darkblue",
        peg$c365 = { type: "literal", value: "darkblue", description: "\"darkblue\"" },
        peg$c366 = "darkpurple",
        peg$c367 = { type: "literal", value: "darkpurple", description: "\"darkpurple\"" },
        peg$c368 = "darkbrown",
        peg$c369 = { type: "literal", value: "darkbrown", description: "\"darkbrown\"" },
        peg$c370 = "white",
        peg$c371 = { type: "literal", value: "white", description: "\"white\"" },
        peg$c372 = "lightgrey",
        peg$c373 = { type: "literal", value: "lightgrey", description: "\"lightgrey\"" },
        peg$c374 = "grey",
        peg$c375 = { type: "literal", value: "grey", description: "\"grey\"" },
        peg$c376 = "darkgrey",
        peg$c377 = { type: "literal", value: "darkgrey", description: "\"darkgrey\"" },
        peg$c378 = "lightcharcoal",
        peg$c379 = { type: "literal", value: "lightcharcoal", description: "\"lightcharcoal\"" },
        peg$c380 = "charcoal",
        peg$c381 = { type: "literal", value: "charcoal", description: "\"charcoal\"" },
        peg$c382 = "darkcharcoal",
        peg$c383 = { type: "literal", value: "darkcharcoal", description: "\"darkcharcoal\"" },
        peg$c384 = "black",
        peg$c385 = { type: "literal", value: "black", description: "\"black\"" },
        peg$c386 = "transparent",
        peg$c387 = { type: "literal", value: "transparent", description: "\"transparent\"" },
        peg$c388 = void 0,
        peg$c389 = function() {textMode=true;},
        peg$c390 = function(rest) {return rest.join("");},
        peg$c391 = function() {return textMode;},
        peg$c392 = function() {return "\n";},
        peg$c393 = function() {return " "},
        peg$c394 = function(w) {return w;},
        peg$c395 = function() {textMode=false;return "";},
        peg$c396 = "true",
        peg$c397 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c398 = "false",
        peg$c399 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c400 = "pausesections",
        peg$c401 = { type: "literal", value: "pausesections", description: "\"pausesections\"" },
        peg$c402 = "pausesubsections",
        peg$c403 = { type: "literal", value: "pausesubsections", description: "\"pausesubsections\"" },
        peg$c404 = "sectionstyle",
        peg$c405 = { type: "literal", value: "sectionstyle", description: "\"sectionstyle\"" },
        peg$c406 = "subsectionstyle",
        peg$c407 = { type: "literal", value: "subsectionstyle", description: "\"subsectionstyle\"" },
        peg$c408 = "show",
        peg$c409 = { type: "literal", value: "show", description: "\"show\"" },
        peg$c410 = "hide",
        peg$c411 = { type: "literal", value: "hide", description: "\"hide\"" },
        peg$c412 = "shaded",
        peg$c413 = { type: "literal", value: "shaded", description: "\"shaded\"" },
        peg$c414 = "bg",
        peg$c415 = { type: "literal", value: "bg", description: "\"bg\"" },
        peg$c416 = "fg",
        peg$c417 = { type: "literal", value: "fg", description: "\"fg\"" },
        peg$c418 = "alpha",
        peg$c419 = { type: "literal", value: "alpha", description: "\"alpha\"" },
        peg$c420 = "fill",
        peg$c421 = { type: "literal", value: "fill", description: "\"fill\"" },
        peg$c422 = "size",
        peg$c423 = { type: "literal", value: "size", description: "\"size\"" },
        peg$c424 = "shape",
        peg$c425 = { type: "literal", value: "shape", description: "\"shape\"" },
        peg$c426 = "family",
        peg$c427 = { type: "literal", value: "family", description: "\"family\"" },
        peg$c428 = "tiny",
        peg$c429 = { type: "literal", value: "tiny", description: "\"tiny\"" },
        peg$c430 = "scriptsize",
        peg$c431 = { type: "literal", value: "scriptsize", description: "\"scriptsize\"" },
        peg$c432 = "footnotesize",
        peg$c433 = { type: "literal", value: "footnotesize", description: "\"footnotesize\"" },
        peg$c434 = "verysmall",
        peg$c435 = { type: "literal", value: "verysmall", description: "\"verysmall\"" },
        peg$c436 = "small",
        peg$c437 = { type: "literal", value: "small", description: "\"small\"" },
        peg$c438 = "normalsize",
        peg$c439 = { type: "literal", value: "normalsize", description: "\"normalsize\"" },
        peg$c440 = "large",
        peg$c441 = { type: "literal", value: "large", description: "\"large\"" },
        peg$c442 = "verylarge",
        peg$c443 = { type: "literal", value: "verylarge", description: "\"verylarge\"" },
        peg$c444 = "huge",
        peg$c445 = { type: "literal", value: "huge", description: "\"huge\"" },
        peg$c446 = "bold",
        peg$c447 = { type: "literal", value: "bold", description: "\"bold\"" },
        peg$c448 = "italic",
        peg$c449 = { type: "literal", value: "italic", description: "\"italic\"" },
        peg$c450 = "bolditalic",
        peg$c451 = { type: "literal", value: "bolditalic", description: "\"bolditalic\"" },
        peg$c452 = "justify",
        peg$c453 = { type: "literal", value: "justify", description: "\"justify\"" },
        peg$c454 = "border",
        peg$c455 = { type: "literal", value: "border", description: "\"border\"" },
        peg$c456 = "padding",
        peg$c457 = { type: "literal", value: "padding", description: "\"padding\"" },
        peg$c458 = "thin",
        peg$c459 = { type: "literal", value: "thin", description: "\"thin\"" },
        peg$c460 = "thick",
        peg$c461 = { type: "literal", value: "thick", description: "\"thick\"" },
        peg$c462 = "medium",
        peg$c463 = { type: "literal", value: "medium", description: "\"medium\"" },
        peg$c464 = "none",
        peg$c465 = { type: "literal", value: "none", description: "\"none\"" },
        peg$c466 = "solid",
        peg$c467 = { type: "literal", value: "solid", description: "\"solid\"" },
        peg$c468 = "dashed",
        peg$c469 = { type: "literal", value: "dashed", description: "\"dashed\"" },
        peg$c470 = "dotted",
        peg$c471 = { type: "literal", value: "dotted", description: "\"dotted\"" },
        peg$c472 = "triangle",
        peg$c473 = { type: "literal", value: "triangle", description: "\"triangle\"" },
        peg$c474 = "circle",
        peg$c475 = { type: "literal", value: "circle", description: "\"circle\"" },
        peg$c476 = "tick",
        peg$c477 = { type: "literal", value: "tick", description: "\"tick\"" },
        peg$c478 = "square",
        peg$c479 = { type: "literal", value: "square", description: "\"square\"" },
        peg$c480 = "rectangle",
        peg$c481 = { type: "literal", value: "rectangle", description: "\"rectangle\"" },
        peg$c482 = "plain",
        peg$c483 = { type: "literal", value: "plain", description: "\"plain\"" },
        peg$c484 = "supportbin",
        peg$c485 = { type: "literal", value: "supportbin", description: "\"supportbin\"" },
        peg$c486 = "simple",
        peg$c487 = { type: "literal", value: "simple", description: "\"simple\"" },
        peg$c488 = "mcq",
        peg$c489 = { type: "literal", value: "mcq", description: "\"mcq\"" },
        peg$c490 = "align",
        peg$c491 = { type: "literal", value: "align", description: "\"align\"" },
        peg$c492 = "placement",
        peg$c493 = { type: "literal", value: "placement", description: "\"placement\"" },
        peg$c494 = "b",
        peg$c495 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c496 = "t",
        peg$c497 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c498 = "c",
        peg$c499 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c500 = "left",
        peg$c501 = { type: "literal", value: "left", description: "\"left\"" },
        peg$c502 = "right",
        peg$c503 = { type: "literal", value: "right", description: "\"right\"" },
        peg$c504 = "center",
        peg$c505 = { type: "literal", value: "center", description: "\"center\"" },
        peg$c506 = "width",
        peg$c507 = { type: "literal", value: "width", description: "\"width\"" },
        peg$c508 = "height",
        peg$c509 = { type: "literal", value: "height", description: "\"height\"" },
        peg$c510 = "scale",
        peg$c511 = { type: "literal", value: "scale", description: "\"scale\"" },
        peg$c512 = "begin",
        peg$c513 = { type: "literal", value: "begin", description: "\"begin\"" },
        peg$c514 = function() {return "";},
        peg$c515 = "end",
        peg$c516 = { type: "literal", value: "end", description: "\"end\"" },
        peg$c517 = "set",
        peg$c518 = { type: "literal", value: "set", description: "\"set\"" },
        peg$c519 = "use",
        peg$c520 = { type: "literal", value: "use", description: "\"use\"" },
        peg$c521 = "insert",
        peg$c522 = { type: "literal", value: "insert", description: "\"insert\"" },
        peg$c523 = "style",
        peg$c524 = { type: "literal", value: "style", description: "\"style\"" },
        peg$c525 = "layout",
        peg$c526 = { type: "literal", value: "layout", description: "\"layout\"" },
        peg$c527 = "theme",
        peg$c528 = { type: "literal", value: "theme", description: "\"theme\"" },
        peg$c529 = "with",
        peg$c530 = { type: "literal", value: "with", description: "\"with\"" },
        peg$c531 = "in",
        peg$c532 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c533 = "canvas",
        peg$c534 = { type: "literal", value: "canvas", description: "\"canvas\"" },
        peg$c535 = "font",
        peg$c536 = { type: "literal", value: "font", description: "\"font\"" },
        peg$c537 = "guide",
        peg$c538 = { type: "literal", value: "guide", description: "\"guide\"" },
        peg$c539 = function() {return ""},
        peg$c540 = "only",
        peg$c541 = { type: "literal", value: "only", description: "\"only\"" },
        peg$c542 = "visible",
        peg$c543 = { type: "literal", value: "visible", description: "\"visible\"" },
        peg$c544 = "invisible",
        peg$c545 = { type: "literal", value: "invisible", description: "\"invisible\"" },
        peg$c546 = "alt",
        peg$c547 = { type: "literal", value: "alt", description: "\"alt\"" },
        peg$c548 = "temporal",
        peg$c549 = { type: "literal", value: "temporal", description: "\"temporal\"" },
        peg$c550 = "item",
        peg$c551 = { type: "literal", value: "item", description: "\"item\"" },
        peg$c552 = "textit",
        peg$c553 = { type: "literal", value: "textit", description: "\"textit\"" },
        peg$c554 = "textbf",
        peg$c555 = { type: "literal", value: "textbf", description: "\"textbf\"" },
        peg$c556 = "underline",
        peg$c557 = { type: "literal", value: "underline", description: "\"underline\"" },
        peg$c558 = "color",
        peg$c559 = { type: "literal", value: "color", description: "\"color\"" },
        peg$c560 = "includegraphics",
        peg$c561 = { type: "literal", value: "includegraphics", description: "\"includegraphics\"" },
        peg$c562 = "subitem",
        peg$c563 = { type: "literal", value: "subitem", description: "\"subitem\"" },
        peg$c564 = "subsubitem",
        peg$c565 = { type: "literal", value: "subsubitem", description: "\"subsubitem\"" },
        peg$c566 = "circle-full",
        peg$c567 = { type: "literal", value: "circle-full", description: "\"circle-full\"" },
        peg$c568 = function() {return "circlefull";},
        peg$c569 = "circle-half",
        peg$c570 = { type: "literal", value: "circle-half", description: "\"circle-half\"" },
        peg$c571 = function() {return "circlehalf";},
        peg$c572 = "circle-cone",
        peg$c573 = { type: "literal", value: "circle-cone", description: "\"circle-cone\"" },
        peg$c574 = function() {return "circlecone";},
        peg$c575 = "plus-equal-horizontal",
        peg$c576 = { type: "literal", value: "plus-equal-horizontal", description: "\"plus-equal-horizontal\"" },
        peg$c577 = function() {return "plusequalhorizontal";},
        peg$c578 = "plus-equal-vertical",
        peg$c579 = { type: "literal", value: "plus-equal-vertical", description: "\"plus-equal-vertical\"" },
        peg$c580 = function() {return "plusequalvetical";},
        peg$c581 = "plus-minus",
        peg$c582 = { type: "literal", value: "plus-minus", description: "\"plus-minus\"" },
        peg$c583 = function() {return "plusminus";},
        peg$c584 = "paragraphlist",
        peg$c585 = { type: "literal", value: "paragraphlist", description: "\"paragraphlist\"" },
        peg$c586 = function() {return "paragraphlist";},
        peg$c587 = "checkbox-comparision",
        peg$c588 = { type: "literal", value: "checkbox-comparision", description: "\"checkbox-comparision\"" },
        peg$c589 = function() {return "checkboxcomparision";},
        peg$c590 = "containerlist",
        peg$c591 = { type: "literal", value: "containerlist", description: "\"containerlist\"" },
        peg$c592 = function() {return "containerlist";},
        peg$c593 = "framedlist",
        peg$c594 = { type: "literal", value: "framedlist", description: "\"framedlist\"" },
        peg$c595 = function() {return "framedlist";},
        peg$c596 = "question",
        peg$c597 = { type: "literal", value: "question", description: "\"question\"" },
        peg$c598 = "correctanswers",
        peg$c599 = { type: "literal", value: "correctanswers", description: "\"correctanswers\"" },
        peg$c600 = "answeroption",
        peg$c601 = { type: "literal", value: "answeroption", description: "\"answeroption\"" },
        peg$c602 = "explanation",
        peg$c603 = { type: "literal", value: "explanation", description: "\"explanation\"" },
        peg$c604 = "authors",
        peg$c605 = { type: "literal", value: "authors", description: "\"authors\"" },
        peg$c606 = "titlegraphic",
        peg$c607 = { type: "literal", value: "titlegraphic", description: "\"titlegraphic\"" },
        peg$c608 = "sectiongraphic",
        peg$c609 = { type: "literal", value: "sectiongraphic", description: "\"sectiongraphic\"" },
        peg$c610 = "subsectiongraphic",
        peg$c611 = { type: "literal", value: "subsectiongraphic", description: "\"subsectiongraphic\"" },
        peg$c612 = "covered",
        peg$c613 = { type: "literal", value: "covered", description: "\"covered\"" },
        peg$c614 = "presentation",
        peg$c615 = { type: "literal", value: "presentation", description: "\"presentation\"" },
        peg$c616 = "appearance",
        peg$c617 = { type: "literal", value: "appearance", description: "\"appearance\"" },
        peg$c618 = "information",
        peg$c619 = { type: "literal", value: "information", description: "\"information\"" },
        peg$c620 = "content",
        peg$c621 = { type: "literal", value: "content", description: "\"content\"" },
        peg$c622 = "slide",
        peg$c623 = { type: "literal", value: "slide", description: "\"slide\"" },
        peg$c624 = "columns",
        peg$c625 = { type: "literal", value: "columns", description: "\"columns\"" },
        peg$c626 = "column",
        peg$c627 = { type: "literal", value: "column", description: "\"column\"" },
        peg$c628 = "enumerate",
        peg$c629 = { type: "literal", value: "enumerate", description: "\"enumerate\"" },
        peg$c630 = "itemize",
        peg$c631 = { type: "literal", value: "itemize", description: "\"itemize\"" },
        peg$c632 = "description",
        peg$c633 = { type: "literal", value: "description", description: "\"description\"" },
        peg$c634 = "smartlist",
        peg$c635 = { type: "literal", value: "smartlist", description: "\"smartlist\"" },
        peg$c636 = "=",
        peg$c637 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c638 = ",",
        peg$c639 = { type: "literal", value: ",", description: "\",\"" },
        peg$c640 = "{",
        peg$c641 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c642 = "}",
        peg$c643 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c644 = "[",
        peg$c645 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c646 = "]",
        peg$c647 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c648 = "<",
        peg$c649 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c650 = ">",
        peg$c651 = { type: "literal", value: ">", description: "\">\"" },
        peg$c652 = { type: "other", description: "BackSlash" },
        peg$c653 = "\\",
        peg$c654 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c655 = "%",
        peg$c656 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c657 = ":",
        peg$c658 = { type: "literal", value: ":", description: "\":\"" },
        peg$c659 = "-",
        peg$c660 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c661 = "+",
        peg$c662 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c663 = "!",
        peg$c664 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c665 = "|",
        peg$c666 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c667 = "~",
        peg$c668 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c669 = /^[a-z A-Z]/,
        peg$c670 = { type: "class", value: "[a-z A-Z]", description: "[a-z A-Z]" },
        peg$c671 = /^[  \t \r \n]/,
        peg$c672 = { type: "class", value: "[  \\t \\r \\n]", description: "[  \\t \\r \\n]" },
        peg$c673 = { type: "other", description: "Special" },
        peg$c674 = /^[{ } < > [ \] \\ ]/,
        peg$c675 = { type: "class", value: "[{ } < > [ \\] \\\\ ]", description: "[{ } < > [ \\] \\\\ ]" },
        peg$c676 = { type: "other", description: "NonLetter" },
        peg$c677 = { type: "other", description: "letter" },
        peg$c678 = { type: "any", description: "any character" },
        peg$c679 = function() {return " ";},
        peg$c680 = /^[0-9]/,
        peg$c681 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c682 = function(n) {return parseInt(n);},
        peg$c683 = ".",
        peg$c684 = { type: "literal", value: ".", description: "\".\"" },
        peg$c685 = function(f) {return parseFloat(f);},
        peg$c686 = "_",
        peg$c687 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c688 = function(ls, rest) {return ls+rest.join(""); },
        peg$c689 = "/",
        peg$c690 = { type: "literal", value: "/", description: "\"/\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsepresentation() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePRES();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepresentationSpec();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsePRES();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c1(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsepresentationSpec() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseappearanceSpec();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinfoSpec();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecontentSpec();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c3(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseappearanceSpec() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAPPEARANCE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseappearanceElement();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseappearanceElement();
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseAPPEARANCE();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c5(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseappearanceElement() {
      var s0;

      s0 = peg$parsesetCanvas();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesetColor();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesetFont();
          if (s0 === peg$FAILED) {
            s0 = peg$parsesetGuideCanvas();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesetGuideColor();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesetGuideFont();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseuseStyleTheme();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseuseFontTheme();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseuseLayoutTheme();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsesetLayout();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuseStyleTheme() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseUSE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSTYLE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTHEME();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestyleThemeName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c6(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuseFontTheme() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseUSE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFONT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTHEME();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCommaSepString();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c7(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseuseLayoutTheme() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseUSE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLAYOUT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTHEME();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parselayoutThemeName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c8(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestyleThemeName() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c9) {
        s0 = peg$c9;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c11) {
          s0 = peg$c11;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c13) {
            s0 = peg$c13;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
        }
      }

      return s0;
    }

    function peg$parselayoutThemeName() {
      var s0;

      s0 = peg$parsesimpleLayoutTheme();
      if (s0 === peg$FAILED) {
        s0 = peg$parseparametericLayoutTheme();
      }

      return s0;
    }

    function peg$parsesimpleLayoutTheme() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c15) {
        s0 = peg$c15;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c17) {
          s0 = peg$c17;
          peg$currPos += 11;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 12) === peg$c19) {
            s0 = peg$c19;
            peg$currPos += 12;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c21) {
              s0 = peg$c21;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c23) {
                s0 = peg$c23;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseparametericLayoutTheme() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWITH();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 12) === peg$c27) {
                s5 = peg$c27;
                peg$currPos += 12;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 15) === peg$c29) {
                  s5 = peg$c29;
                  peg$currPos += 15;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c30); }
                }
                if (s5 === peg$FAILED) {
                  if (input.substr(peg$currPos, 22) === peg$c31) {
                    s5 = peg$c31;
                    peg$currPos += 22;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c33) {
                      s5 = peg$c33;
                      peg$currPos += 7;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c35(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 10) === peg$c25) {
          s1 = peg$c25;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesetLayout() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLAYOUT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecomponentNames();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseLCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parselayoutContent();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseRCURLY();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseIgnore_();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c37(s4, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselayoutContent() {
      var s0, s1, s2;

      s0 = peg$parsecolumnedLayoutContent();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseinsert();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseinsert();
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c38(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecolumnedLayoutContent() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLUMNS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parselayoutColumnContent();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parselayoutColumnContent();
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCOLUMNS();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c39(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselayoutColumnContent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLUMN();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumnOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsewidth();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseinsert();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseinsert();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseEND();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseCOLUMN();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseIgnore_();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c40(s3, s5, s8);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinsert() {
      var s0;

      s0 = peg$parsesimpleInsert();
      if (s0 === peg$FAILED) {
        s0 = peg$parseparametericInsert();
      }

      return s0;
    }

    function peg$parsesimpleInsert() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseINSERT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLCURLY();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesimpleInsertNames();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIgnore_();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c41(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleInsertNames() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 19) === peg$c42) {
        s0 = peg$c42;
        peg$currPos += 19;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c44) {
          s0 = peg$c44;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 27) === peg$c46) {
            s0 = peg$c46;
            peg$currPos += 27;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 18) === peg$c48) {
              s0 = peg$c48;
              peg$currPos += 18;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 30) === peg$c50) {
                s0 = peg$c50;
                peg$currPos += 30;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 21) === peg$c52) {
                  s0 = peg$c52;
                  peg$currPos += 21;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c53); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 12) === peg$c54) {
                    s0 = peg$c54;
                    peg$currPos += 12;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c55); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 15) === peg$c56) {
                      s0 = peg$c56;
                      peg$currPos += 15;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c57); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c58) {
                        s0 = peg$c58;
                        peg$currPos += 7;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c59); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 10) === peg$c60) {
                          s0 = peg$c60;
                          peg$currPos += 10;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c61); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 13) === peg$c62) {
                            s0 = peg$c62;
                            peg$currPos += 13;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c63); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c64) {
                              s0 = peg$c64;
                              peg$currPos += 4;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c65); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 22) === peg$c66) {
                                s0 = peg$c66;
                                peg$currPos += 22;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c67); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 12) === peg$c68) {
                                  s0 = peg$c68;
                                  peg$currPos += 12;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c69); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c70) {
                                    s0 = peg$c70;
                                    peg$currPos += 5;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 8) === peg$c72) {
                                      s0 = peg$c72;
                                      peg$currPos += 8;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c73); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 6) === peg$c74) {
                                        s0 = peg$c74;
                                        peg$currPos += 6;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c75); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 9) === peg$c76) {
                                          s0 = peg$c76;
                                          peg$currPos += 9;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c78) {
                                            s0 = peg$c78;
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c80) {
                                              s0 = peg$c80;
                                              peg$currPos += 5;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c81); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 16) === peg$c82) {
                                                s1 = peg$c82;
                                                peg$currPos += 16;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c83); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                if (input.substr(peg$currPos, 12) === peg$c84) {
                                                  s2 = peg$c84;
                                                  peg$currPos += 12;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  s1 = [s1, s2];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 7) === peg$c86) {
                                                  s0 = peg$c86;
                                                  peg$currPos += 7;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c87); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 4) === peg$c88) {
                                                    s0 = peg$c88;
                                                    peg$currPos += 4;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c89); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c90) {
                                                      s0 = peg$c90;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 8) === peg$c92) {
                                                        s0 = peg$c92;
                                                        peg$currPos += 8;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseparametericInsert() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseINSERT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLCURLY();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c94) {
            s3 = peg$c94;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetocOptions();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c96(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetocOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetocOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsecommaSepTOCOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsecommaSepTOCOption();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c97(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecommaSepTOCOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCOMMA();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetocOption();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetocOption() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsePAUSESECTIONS();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePAUSESUBSECTIONS();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTRUE();
          if (s3 === peg$FAILED) {
            s3 = peg$parseFALSE();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c99(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSECTIONSTYLE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQ();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsetocStyle();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEXCLAIM();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsetocStyle();
                if (s6 !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseIgnore_();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c100(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSUBSECTIONSTYLE();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQ();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsetocStyle();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseEXCLAIM();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsetocStyle();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseEXCLAIM();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsetocStyle();
                      if (s8 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7, s8];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c0;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseIgnore_();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c100(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsetocStyle() {
      var s0;

      s0 = peg$parseSHOW();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHIDE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSHADED();
        }
      }

      return s0;
    }

    function peg$parsecomponentNames() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c101) {
        s1 = peg$c101;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c103) {
          s1 = peg$c103;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c105) {
            s1 = peg$c105;
            peg$currPos += 13;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 12) === peg$c107) {
              s1 = peg$c107;
              peg$currPos += 12;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 20) === peg$c109) {
                s1 = peg$c109;
                peg$currPos += 20;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c110); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 18) === peg$c111) {
                  s1 = peg$c111;
                  peg$currPos += 18;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c112); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 11) === peg$c113) {
                    s1 = peg$c113;
                    peg$currPos += 11;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c114); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c115) {
                      s1 = peg$c115;
                      peg$currPos += 9;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c116); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 20) === peg$c117) {
                        s1 = peg$c117;
                        peg$currPos += 20;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c118); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 23) === peg$c119) {
                          s1 = peg$c119;
                          peg$currPos += 23;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c120); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c121(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesetColor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetemplateName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecolorOptions();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecolorAddditionalOptions();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseIgnore_();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c122(s4, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetGuideColor() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGUIDE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOLOR();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseguideName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecolorOptions();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecolorAddditionalOptions();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIgnore_();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c123(s5, s7, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolorOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolorOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecolorOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecolorOption();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c124(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolorOption() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseBORDER();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBG();
        if (s1 === peg$FAILED) {
          s1 = peg$parseFG();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolorString();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c125(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePADDING();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQ();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecolorString();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEXCLAIM();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecolorString();
                if (s5 === peg$FAILED) {
                  s5 = peg$c2;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseEXCLAIM();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsecolorString();
                    if (s7 === peg$FAILED) {
                      s7 = peg$c2;
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseEXCLAIM();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsecolorString();
                        if (s9 === peg$FAILED) {
                          s9 = peg$c2;
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseIgnore_();
                          if (s10 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c126(s1, s3, s5, s7, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecolorAddditionalOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolorAddditionalOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parserestcolorAddditionalOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parserestcolorAddditionalOption();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c127(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parserestcolorAddditionalOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCOMMA();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolorAddditionalOption();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c128(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolorAddditionalOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseFILL();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolorString();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c129(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALPHA();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQ();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseFloat();
            if (s4 !== peg$FAILED) {
              s4 = input.substring(s3, peg$currPos);
            }
            s3 = s4;
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c129(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesetCanvas() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCANVAS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetemplateName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecanvasOptions();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecanvasAddditionalOptions();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseIgnore_();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c130(s4, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetGuideCanvas() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGUIDE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCANVAS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseguideName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecanvasOptions();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecanvasAddditionalOptions();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIgnore_();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c131(s5, s7, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecanvasOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecanvasOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecanvasOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecanvasOption();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c132(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecanvasOption() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseBORDER();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTHIN();
          if (s3 === peg$FAILED) {
            s3 = peg$parseMEDIUM();
            if (s3 === peg$FAILED) {
              s3 = peg$parseTHICK();
              if (s3 === peg$FAILED) {
                s3 = peg$parseNONE();
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseNumber();
                  if (s4 !== peg$FAILED) {
                    s4 = input.substring(s3, peg$currPos);
                  }
                  s3 = s4;
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseEXCLAIM();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSOLID();
              if (s6 === peg$FAILED) {
                s6 = peg$parseDASHED();
                if (s6 === peg$FAILED) {
                  s6 = peg$parseDOTTED();
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIgnore_();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c133(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePADDING();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQ();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepaddingThick();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEXCLAIM();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsepaddingThick();
                if (s5 === peg$FAILED) {
                  s5 = peg$c2;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseEXCLAIM();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsepaddingThick();
                    if (s7 === peg$FAILED) {
                      s7 = peg$c2;
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseEXCLAIM();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsepaddingThick();
                        if (s9 === peg$FAILED) {
                          s9 = peg$c2;
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseIgnore_();
                          if (s10 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c126(s1, s3, s5, s7, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsepaddingThick() {
      var s0, s1;

      s0 = peg$parseTHIN();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTHICK();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMEDIUM();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseNumber();
            if (s1 !== peg$FAILED) {
              s1 = input.substring(s0, peg$currPos);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsecanvasAddditionalOptions() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecanvasAddditionalOption();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsecanvasAddditionalOption();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRSQUARE();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c134(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecanvasAddditionalOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSHAPE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCIRCLE();
          if (s3 === peg$FAILED) {
            s3 = peg$parseTICK();
            if (s3 === peg$FAILED) {
              s3 = peg$parseSQUARE();
              if (s3 === peg$FAILED) {
                s3 = peg$parseRECTANGLE();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseTRIANGLE();
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c129(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetFont() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFONT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetemplateName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsefontOptions();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c135(s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesetGuideFont() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGUIDE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFONT();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseguideName();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsefontOptions();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseIgnore_();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c136(s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefontOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefontOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsefontOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsefontOption();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c137(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsefontOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSIZE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTINY();
          if (s3 === peg$FAILED) {
            s3 = peg$parseSCRIPTSIZE();
            if (s3 === peg$FAILED) {
              s3 = peg$parseFOOTNOTESIZE();
              if (s3 === peg$FAILED) {
                s3 = peg$parseVERYSMALL();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseSMALL();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseNORMALSIZE();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseLARGE();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseVERYLARGE();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parseHUGE();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c138(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSHAPE();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQ();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseNORMAL();
            if (s3 === peg$FAILED) {
              s3 = peg$parseBOLD();
              if (s3 === peg$FAILED) {
                s3 = peg$parseITALIC();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseBOLDITALIC();
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseIgnore_();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c138(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseALIGN();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQ();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLEFT();
              if (s3 === peg$FAILED) {
                s3 = peg$parseRIGHT();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseCENTER();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseJUSTIFY();
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseIgnore_();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c138(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFAMILY();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEQ();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseStringLine();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseIgnore_();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c138(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetemplateName() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsetemplate();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIN();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecontainer();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c139(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetemplate() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 20) === peg$c109) {
        s0 = peg$c109;
        peg$currPos += 20;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 27) === peg$c140) {
          s0 = peg$c140;
          peg$currPos += 27;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c141); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 18) === peg$c111) {
            s0 = peg$c111;
            peg$currPos += 18;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 25) === peg$c142) {
              s0 = peg$c142;
              peg$currPos += 25;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c143); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c144) {
                s0 = peg$c144;
                peg$currPos += 15;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c145); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 18) === peg$c146) {
                  s0 = peg$c146;
                  peg$currPos += 18;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c147); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 13) === peg$c148) {
                    s0 = peg$c148;
                    peg$currPos += 13;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c149); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 16) === peg$c150) {
                      s0 = peg$c150;
                      peg$currPos += 16;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c151); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 18) === peg$c152) {
                        s0 = peg$c152;
                        peg$currPos += 18;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c153); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 25) === peg$c154) {
                          s0 = peg$c154;
                          peg$currPos += 25;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c155); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 21) === peg$c156) {
                            s0 = peg$c156;
                            peg$currPos += 21;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c157); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 28) === peg$c158) {
                              s0 = peg$c158;
                              peg$currPos += 28;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c159); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 24) === peg$c160) {
                                s0 = peg$c160;
                                peg$currPos += 24;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c161); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 31) === peg$c162) {
                                  s0 = peg$c162;
                                  peg$currPos += 31;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c163); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 23) === peg$c164) {
                                    s0 = peg$c164;
                                    peg$currPos += 23;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c165); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 26) === peg$c166) {
                                      s0 = peg$c166;
                                      peg$currPos += 26;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c167); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 29) === peg$c168) {
                                        s0 = peg$c168;
                                        peg$currPos += 29;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c169); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 25) === peg$c170) {
                                          s0 = peg$c170;
                                          peg$currPos += 25;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c171); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 28) === peg$c172) {
                                            s0 = peg$c172;
                                            peg$currPos += 28;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c173); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 31) === peg$c174) {
                                              s0 = peg$c174;
                                              peg$currPos += 31;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c175); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 27) === peg$c176) {
                                                s0 = peg$c176;
                                                peg$currPos += 27;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 30) === peg$c178) {
                                                  s0 = peg$c178;
                                                  peg$currPos += 30;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c179); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 33) === peg$c180) {
                                                    s0 = peg$c180;
                                                    peg$currPos += 33;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c181); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c70) {
                                                      s0 = peg$c70;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 8) === peg$c72) {
                                                        s0 = peg$c72;
                                                        peg$currPos += 8;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c73); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 6) === peg$c74) {
                                                          s0 = peg$c74;
                                                          peg$currPos += 6;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c75); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 4) === peg$c78) {
                                                            s0 = peg$c78;
                                                            peg$currPos += 4;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 9) === peg$c76) {
                                                              s0 = peg$c76;
                                                              peg$currPos += 9;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 12) === peg$c68) {
                                                                s0 = peg$c68;
                                                                peg$currPos += 12;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c69); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 13) === peg$c182) {
                                                                  s0 = peg$c182;
                                                                  peg$currPos += 13;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c183); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 15) === peg$c184) {
                                                                    s0 = peg$c184;
                                                                    peg$currPos += 15;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c185); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 18) === peg$c186) {
                                                                      s0 = peg$c186;
                                                                      peg$currPos += 18;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c187); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 11) === peg$c188) {
                                                                        s0 = peg$c188;
                                                                        peg$currPos += 11;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c189); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        if (input.substr(peg$currPos, 14) === peg$c190) {
                                                                          s1 = peg$c190;
                                                                          peg$currPos += 14;
                                                                        } else {
                                                                          s1 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c191); }
                                                                        }
                                                                        if (s1 !== peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 7) === peg$c58) {
                                                                            s2 = peg$c58;
                                                                            peg$currPos += 7;
                                                                          } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                                                          }
                                                                          if (s2 !== peg$FAILED) {
                                                                            s1 = [s1, s2];
                                                                            s0 = s1;
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 10) === peg$c60) {
                                                                            s0 = peg$c60;
                                                                            peg$currPos += 10;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 13) === peg$c62) {
                                                                              s0 = peg$c62;
                                                                              peg$currPos += 13;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c63); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 14) === peg$c192) {
                                                                                s0 = peg$c192;
                                                                                peg$currPos += 14;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c193); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 17) === peg$c194) {
                                                                                  s0 = peg$c194;
                                                                                  peg$currPos += 17;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c195); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 20) === peg$c196) {
                                                                                    s0 = peg$c196;
                                                                                    peg$currPos += 20;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c197); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 8) === peg$c101) {
                                                                                      s0 = peg$c101;
                                                                                      peg$currPos += 8;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c102); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 8) === peg$c103) {
                                                                                        s0 = peg$c103;
                                                                                        peg$currPos += 8;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c104); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 12) === peg$c107) {
                                                                                          s0 = peg$c107;
                                                                                          peg$currPos += 12;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c108); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 13) === peg$c105) {
                                                                                            s0 = peg$c105;
                                                                                            peg$currPos += 13;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 10) === peg$c25) {
                                                                                              s0 = peg$c25;
                                                                                              peg$currPos += 10;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 4) === peg$c64) {
                                                                                                s0 = peg$c64;
                                                                                                peg$currPos += 4;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c65); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 5) === peg$c198) {
                                                                                                  s0 = peg$c198;
                                                                                                  peg$currPos += 5;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c199); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 8) === peg$c200) {
                                                                                                    s0 = peg$c200;
                                                                                                    peg$currPos += 8;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c201); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 8) === peg$c202) {
                                                                                                      s0 = peg$c202;
                                                                                                      peg$currPos += 8;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c203); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 12) === peg$c204) {
                                                                                                        s0 = peg$c204;
                                                                                                        peg$currPos += 12;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c205); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 4) === peg$c90) {
                                                                                                          s0 = peg$c90;
                                                                                                          peg$currPos += 4;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 11) === peg$c206) {
                                                                                                            s0 = peg$c206;
                                                                                                            peg$currPos += 11;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c207); }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 6) === peg$c208) {
                                                                                                              s0 = peg$c208;
                                                                                                              peg$currPos += 6;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c209); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 9) === peg$c210) {
                                                                                                                s0 = peg$c210;
                                                                                                                peg$currPos += 9;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c211); }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 5) === peg$c212) {
                                                                                                                  s0 = peg$c212;
                                                                                                                  peg$currPos += 5;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c213); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 12) === peg$c214) {
                                                                                                                    s0 = peg$c214;
                                                                                                                    peg$currPos += 12;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c215); }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 15) === peg$c216) {
                                                                                                                      s0 = peg$c216;
                                                                                                                      peg$currPos += 15;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c217); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 18) === peg$c218) {
                                                                                                                        s0 = peg$c218;
                                                                                                                        peg$currPos += 18;
                                                                                                                      } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c219); }
                                                                                                                      }
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 14) === peg$c220) {
                                                                                                                          s0 = peg$c220;
                                                                                                                          peg$currPos += 14;
                                                                                                                        } else {
                                                                                                                          s0 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c221); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 17) === peg$c222) {
                                                                                                                            s0 = peg$c222;
                                                                                                                            peg$currPos += 17;
                                                                                                                          } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c223); }
                                                                                                                          }
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 20) === peg$c224) {
                                                                                                                              s0 = peg$c224;
                                                                                                                              peg$currPos += 20;
                                                                                                                            } else {
                                                                                                                              s0 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c225); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              if (input.substr(peg$currPos, 16) === peg$c226) {
                                                                                                                                s0 = peg$c226;
                                                                                                                                peg$currPos += 16;
                                                                                                                              } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c227); }
                                                                                                                              }
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                if (input.substr(peg$currPos, 19) === peg$c228) {
                                                                                                                                  s0 = peg$c228;
                                                                                                                                  peg$currPos += 19;
                                                                                                                                } else {
                                                                                                                                  s0 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c229); }
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  if (input.substr(peg$currPos, 22) === peg$c230) {
                                                                                                                                    s0 = peg$c230;
                                                                                                                                    peg$currPos += 22;
                                                                                                                                  } else {
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c231); }
                                                                                                                                  }
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    if (input.substr(peg$currPos, 7) === peg$c232) {
                                                                                                                                      s0 = peg$c232;
                                                                                                                                      peg$currPos += 7;
                                                                                                                                    } else {
                                                                                                                                      s0 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c233); }
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      if (input.substr(peg$currPos, 21) === peg$c234) {
                                                                                                                                        s0 = peg$c234;
                                                                                                                                        peg$currPos += 21;
                                                                                                                                      } else {
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c235); }
                                                                                                                                      }
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        if (input.substr(peg$currPos, 3) === peg$c94) {
                                                                                                                                          s0 = peg$c94;
                                                                                                                                          peg$currPos += 3;
                                                                                                                                        } else {
                                                                                                                                          s0 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecontainer() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 8) === peg$c101) {
        s0 = peg$c101;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c103) {
          s0 = peg$c103;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c236) {
            s0 = peg$c236;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c237); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c198) {
              s0 = peg$c198;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c199); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 12) === peg$c204) {
                s0 = peg$c204;
                peg$currPos += 12;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c205); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c202) {
                  s0 = peg$c202;
                  peg$currPos += 8;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c203); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c94) {
                    s1 = peg$c94;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 10) === peg$c25) {
                      s2 = peg$c25;
                      peg$currPos += 10;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                    }
                    if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseguideName() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseguide();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c238(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseguide() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c239) {
        s0 = peg$c239;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 14) === peg$c241) {
          s0 = peg$c241;
          peg$currPos += 14;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c242); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c243) {
            s0 = peg$c243;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c244); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c245) {
              s0 = peg$c245;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c246); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c247) {
                s0 = peg$c247;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c248); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c249) {
                  s0 = peg$c249;
                  peg$currPos += 11;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c250); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 10) === peg$c251) {
                    s0 = peg$c251;
                    peg$currPos += 10;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c252); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 14) === peg$c253) {
                      s0 = peg$c253;
                      peg$currPos += 14;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c254); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c255) {
                        s0 = peg$c255;
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c256); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c257) {
                          s0 = peg$c257;
                          peg$currPos += 7;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c258); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 10) === peg$c259) {
                            s0 = peg$c259;
                            peg$currPos += 10;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c260); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 15) === peg$c261) {
                              s0 = peg$c261;
                              peg$currPos += 15;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c262); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 18) === peg$c263) {
                                s0 = peg$c263;
                                peg$currPos += 18;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c264); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 21) === peg$c265) {
                                  s0 = peg$c265;
                                  peg$currPos += 21;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c266); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseinfoSpec() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINFORMATION();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseinfoElement();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseinfoElement();
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseINFORMATION();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c267(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinfoElement() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseinfoElementType1();
      if (s1 === peg$FAILED) {
        s1 = peg$parseinfoElementType2();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c268(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinfoElementType1() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTITLE();
        if (s2 === peg$FAILED) {
          s2 = peg$parseSUBTITLE();
          if (s2 === peg$FAILED) {
            s2 = peg$parseAUTHORS();
            if (s2 === peg$FAILED) {
              s2 = peg$parseINSTITUTE();
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinCurlyText();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c269(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinfoElementType2() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDATE();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLOGO();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTITLEGRAPHIC();
            if (s2 === peg$FAILED) {
              s2 = peg$parseSECTIONGRAPHIC();
              if (s2 === peg$FAILED) {
                s2 = peg$parseSUBSECTIONGRAPHIC();
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFileName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c269(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecontentSpec() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCONTENT();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsecontentPart();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsecontentPart();
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCONTENT();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c270(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecontentPart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsesection();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesubsection();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesubsubsection();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsesection();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesubsection();
          if (s2 === peg$FAILED) {
            s2 = peg$parsesubsubsection();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseslide();
        if (s3 === peg$FAILED) {
          s3 = peg$parsesupportbin();
          if (s3 === peg$FAILED) {
            s3 = peg$parsequiz();
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseslide();
            if (s3 === peg$FAILED) {
              s3 = peg$parsesupportbin();
              if (s3 === peg$FAILED) {
                s3 = peg$parsequiz();
              }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c271(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesection() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSECTION();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinCurlyText();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinCurlyText();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c272(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesubsection() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSUBSECTION();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinCurlyText();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinCurlyText();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c273(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesubsubsection() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseSUBSUBSECTION();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinCurlyText();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinCurlyText();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c274(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslide() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSLIDE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseslideOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseinCurlyText();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinCurlyText();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseslidecontent();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseEND();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseSLIDE();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseIgnore_();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c275(s3, s4, s5, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslideOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseslideOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseslideOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseslideOption();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c276(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslideOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsePLAIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseTRUE();
          if (s3 === peg$FAILED) {
            s3 = peg$parseFALSE();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c277(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSUPBIN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQ();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLabel();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c277(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseQUIZLABEL();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEQ();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLabel();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c277(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseslidecontent() {
      var s0, s1, s2;

      s0 = peg$parsecolumnedSlideContent();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseslideElement();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseslideElement();
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c278(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecolumnedSlideContent() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLUMNS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsecolumnContent();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsecolumnContent();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEND();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCOLUMNS();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c279(s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnContent() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLUMN();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecolumnOptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsewidth();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRCURLY();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseslideElement();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parseslideElement();
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseEND();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseCOLUMN();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseIgnore_();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c280(s3, s5, s8);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnOptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecolumnOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecolumnOption();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseCOMMA();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecolumnOption();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c281(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolumnOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseALIGN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseB();
          if (s3 === peg$FAILED) {
            s3 = peg$parseT();
            if (s3 === peg$FAILED) {
              s3 = peg$parseC();
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c277(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePLACEMENT();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEQ();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLEFT();
            if (s3 === peg$FAILED) {
              s3 = peg$parseRIGHT();
              if (s3 === peg$FAILED) {
                s3 = peg$parseCENTER();
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c277(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseslideElement() {
      var s0;

      s0 = peg$parseblock();
      if (s0 === peg$FAILED) {
        s0 = peg$parseimagebox();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesimpleTextbox();
          if (s0 === peg$FAILED) {
            s0 = peg$parseframebox();
            if (s0 === peg$FAILED) {
              s0 = peg$parseslateList();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesmartList();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseblockName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesplAnimation();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseblockTitle();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsesimpleText();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseIgnore_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseEND();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseblockName();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseIgnore_();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c282(s2, s3, s5, s7, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseblockName() {
      var s0;

      s0 = peg$parseBLOCK();
      if (s0 === peg$FAILED) {
        s0 = peg$parseALERTBLOCK();
      }

      return s0;
    }

    function peg$parseblockTitle() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTITLE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinCurlyText();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c271(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseframebox() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFRAMEBOX();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesplAnimation();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIgnore_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesimpleText();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseEND();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseFRAMEBOX();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIgnore_();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c283(s3, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseimagebox() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIMAGEBOX();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesplAnimation();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseimageOptions();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIgnore_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseBSLASH();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseINCLUDEGRAPHICS();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseLCURLY();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseFileName();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseRCURLY();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseIgnore_();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsecaption();
                            if (s12 === peg$FAILED) {
                              s12 = peg$c2;
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseEND();
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseIMAGEBOX();
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parseIgnore_();
                                  if (s15 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c284(s3, s4, s9, s12);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecaption() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCAPTION();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestringText();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c271(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseimageOptions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseimageOption();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsecommaimageOption();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsecommaimageOption();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRSQUARE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c285(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecommaimageOption() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseCOMMA();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseimageOption();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c286(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseimageOption() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseWIDTH();
      if (s1 === peg$FAILED) {
        s1 = peg$parseHEIGHT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSCALE();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEQ();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseNumber();
          if (s4 !== peg$FAILED) {
            s4 = input.substring(s3, peg$currPos);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c129(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseslateList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebeginList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselistAnimation();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIgnore_();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parselistItems();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parselistItems();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseendist();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c287(s1, s2, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsebeginList() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselistType();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c288(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseendist() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseEND();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselistType();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c289(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselistType() {
      var s0;

      s0 = peg$parseENUMERATE();
      if (s0 === peg$FAILED) {
        s0 = peg$parseITEMIZE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDESCRIPTION();
        }
      }

      return s0;
    }

    function peg$parselistItems() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseITEM();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesplAnimation();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parselistItemOption();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesimpleText();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c290(s3, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseslateList();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c271(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parselistItemOption() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLSQUARE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStringLine();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRSQUARE();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c271(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesmartList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSMARTLIST();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesmartListType();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesplAnimation();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseIgnore_();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parsesmartListItems();
                    if (s9 !== peg$FAILED) {
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parsesmartListItems();
                      }
                    } else {
                      s8 = peg$c0;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseEND();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseSMARTLIST();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseIgnore_();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c291(s4, s6, s8);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesmartListType() {
      var s0;

      s0 = peg$parseCIRCLEFULL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCIRCLEHALF();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCIRCLECONE();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePLUSEQUALHORIZONTAL();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePLUSEQUALVERTICAL();
              if (s0 === peg$FAILED) {
                s0 = peg$parsePLUSMINUS();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsePARAGRAPHLIST();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCHECKBOXCOMPARISION();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCONTAINERLIST();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseFRAMEDLIST();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsesmartListItems() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesmartItemType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsestringText();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c292(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesmartItemType() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseITEM();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c293();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSUBITEM();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c294();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSUBSUBITEM();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c295();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsesimpleTextbox() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parsesimpleText();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c296(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseoneParamAnimationCommands();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseanimation();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLCURLY();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsesimpleText();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseRCURLY();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseIgnore_();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c297(s1, s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsealt();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseanimation();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLCURLY();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsesimpleText();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseRCURLY();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseLCURLY();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsesimpleText();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseRCURLY();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseIgnore_();
                          if (s9 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c298(s2, s4, s7);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsetemporal();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseanimation();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseLCURLY();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsesimpleText();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseRCURLY();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseLCURLY();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsesimpleText();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseRCURLY();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parseLCURLY();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parsesimpleText();
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parseRCURLY();
                                if (s11 !== peg$FAILED) {
                                  s12 = peg$parseIgnore_();
                                  if (s12 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c299(s2, s4, s7, s10);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseoneParamAnimationCommands() {
      var s0;

      s0 = peg$parseonly();
      if (s0 === peg$FAILED) {
        s0 = peg$parsevisible();
        if (s0 === peg$FAILED) {
          s0 = peg$parseinvisible();
        }
      }

      return s0;
    }

    function peg$parseonly() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseONLY();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c300();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsevisible() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVISIBLE();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c301();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinvisible() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseINVISIBLE();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c302();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsealt() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseALT();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c303();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetemporal() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTEMPORAL();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c304();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesimpleText() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsetextPart();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsetextPart();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextPart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsestringText();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c305(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseinTextCommands();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseanimation();
          if (s2 === peg$FAILED) {
            s2 = peg$c2;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseinCurlyText();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseIgnore_();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c306(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseinTextCommands() {
      var s0;

      s0 = peg$parsealert();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehighlight();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetextit();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetextbf();
            if (s0 === peg$FAILED) {
              s0 = peg$parseunderline();
              if (s0 === peg$FAILED) {
                s0 = peg$parsecolorCommand();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsealert() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseALERT();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c307();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsehighlight() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHIGHLIGHT();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c308();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextit() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTEXTIT();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c309();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsetextbf() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTEXTBF();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c310();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseunderline() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUNDERLINE();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c311();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolorCommand() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCOLOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecolorString();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c128(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesupportbin() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUPPORTBIN();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLabel();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseslideElement();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseslideElement();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseEND();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseSUPPORTBIN();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseIgnore_();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c312(s4, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequiz() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parseBEGIN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseQUIZ();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLCURLY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLabel();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsequestion();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecorrectanswers();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$parseansweroption();
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        s10 = peg$parseansweroption();
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseexplanation();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c2;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseEND();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseQUIZ();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseIgnore_();
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c313(s4, s7, s8, s9, s10);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequestion() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseQUESTION();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLCURLY();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestringText();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsequestionType();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIgnore_();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c314(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsequestionType() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSIMPLE();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMCQ();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c98(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecorrectanswers() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCORRECTANSWERS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLCURLY();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestringText();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIgnore_();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c315(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseansweroption() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseANSWEROPTION();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLCURLY();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestringText();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseLCURLY();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTRUE();
                if (s6 === peg$FAILED) {
                  s6 = peg$parseFALSE();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRCURLY();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseIgnore_();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c316(s3, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexplanation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseEXPLANATION();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLCURLY();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestringText();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRCURLY();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIgnore_();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c271(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parselistAnimation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLANGLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parsePLUS();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHYPHEN();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseBAR();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOVERED();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRANGLE();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c317(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsesplAnimation();
      }

      return s0;
    }

    function peg$parsesplAnimation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseLANGLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parsestartAnimation();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsestartAnimation();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$c0;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseCOMMA();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsestartAnimation();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseBAR();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOVERED();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRANGLE();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c317(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseanimation() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseLANGLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parsestartAnimation();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseCOMMA();
          if (s7 !== peg$FAILED) {
            s8 = peg$parsestartAnimation();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$c0;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseCOMMA();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsestartAnimation();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c0;
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s3 = input.substring(s2, peg$currPos);
        }
        s2 = s3;
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRANGLE();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c318(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestartAnimation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseNumber();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHYPHEN();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNumber();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c319(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNumber();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseHYPHEN();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c320(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNumber();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c320(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseHYPHEN();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseNumber();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c320(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewidth() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseFloat();
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePERCENT();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c321(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsecolorString() {
      var s0;

      s0 = peg$parsenamedColor();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecolorCode();
      }

      return s0;
    }

    function peg$parsecolorCode() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c322) {
        s2 = peg$c322;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c324) {
          s2 = peg$c324;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c325); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOLON();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNumber();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOLON();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseNumber();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCOLON();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseNumber();
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c326) {
          s2 = peg$c326;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c327); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c328) {
            s2 = peg$c328;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c329); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCOLON();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseNumber();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCOLON();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNumber();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseCOLON();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseNumber();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseCOLON();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseNumber();
                        if (s10 !== peg$FAILED) {
                          s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$c0;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s1 = input.substring(s0, peg$currPos);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenamedColor() {
      var s0, s1, s2;

      if (input.substr(peg$currPos, 3) === peg$c330) {
        s0 = peg$c330;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c331); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c332) {
          s0 = peg$c332;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c333); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c334) {
            s0 = peg$c334;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c335); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c336) {
              s0 = peg$c336;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c337); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c338) {
                s0 = peg$c338;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c339); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c340) {
                  s0 = peg$c340;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c341); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c342) {
                    s0 = peg$c342;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c343); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c344) {
                      s0 = peg$c344;
                      peg$currPos += 8;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c345); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 11) === peg$c346) {
                        s0 = peg$c346;
                        peg$currPos += 11;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c347); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 11) === peg$c348) {
                          s0 = peg$c348;
                          peg$currPos += 11;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c349); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 10) === peg$c350) {
                            s0 = peg$c350;
                            peg$currPos += 10;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c351); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c352) {
                              s0 = peg$c352;
                              peg$currPos += 9;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c353); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 10) === peg$c354) {
                                s0 = peg$c354;
                                peg$currPos += 10;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c355); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c356) {
                                  s0 = peg$c356;
                                  peg$currPos += 7;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c357); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 10) === peg$c358) {
                                    s0 = peg$c358;
                                    peg$currPos += 10;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c359); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 10) === peg$c360) {
                                      s0 = peg$c360;
                                      peg$currPos += 10;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c361); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 9) === peg$c362) {
                                        s0 = peg$c362;
                                        peg$currPos += 9;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c363); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 8) === peg$c364) {
                                          s0 = peg$c364;
                                          peg$currPos += 8;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c365); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 10) === peg$c366) {
                                            s0 = peg$c366;
                                            peg$currPos += 10;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c367); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 9) === peg$c368) {
                                              s0 = peg$c368;
                                              peg$currPos += 9;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c369); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 5) === peg$c370) {
                                                s1 = peg$c370;
                                                peg$currPos += 5;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c371); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                if (input.substr(peg$currPos, 9) === peg$c372) {
                                                  s2 = peg$c372;
                                                  peg$currPos += 9;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c373); }
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  s1 = [s1, s2];
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 4) === peg$c374) {
                                                  s0 = peg$c374;
                                                  peg$currPos += 4;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c375); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 8) === peg$c376) {
                                                    s0 = peg$c376;
                                                    peg$currPos += 8;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c377); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 13) === peg$c378) {
                                                      s1 = peg$c378;
                                                      peg$currPos += 13;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c379); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      if (input.substr(peg$currPos, 8) === peg$c380) {
                                                        s2 = peg$c380;
                                                        peg$currPos += 8;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c381); }
                                                      }
                                                      if (s2 !== peg$FAILED) {
                                                        s1 = [s1, s2];
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 12) === peg$c382) {
                                                        s0 = peg$c382;
                                                        peg$currPos += 12;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c383); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c384) {
                                                          s0 = peg$c384;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c385); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 11) === peg$c386) {
                                                            s0 = peg$c386;
                                                            peg$currPos += 11;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c387); }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseinCurlyText() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestringText();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c271(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestringText() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsestartText();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetext();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestartText() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseLetter();
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = peg$c388;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c389();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetext() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseinText();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseinText();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c390(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseinText() {
      var s0, s1, s2;

      s0 = peg$currPos;
      peg$reportedPos = peg$currPos;
      s1 = peg$c391();
      if (s1) {
        s1 = peg$c388;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinTextChar();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c128(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinTextChar() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBSLASH();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c392();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBSLASH();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTILDE();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c393();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBSLASH();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseSpecChar();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c394(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c394(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$parseLetter();
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$currPos;
                peg$silentFails++;
                s2 = peg$parseRCURLY();
                peg$silentFails--;
                if (s2 !== peg$FAILED) {
                  peg$currPos = s1;
                  s1 = peg$c388;
                } else {
                  s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c395();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$currPos;
                  peg$silentFails++;
                  s2 = peg$parseBSLASH();
                  peg$silentFails--;
                  if (s2 !== peg$FAILED) {
                    peg$currPos = s1;
                    s1 = peg$c388;
                  } else {
                    s1 = peg$c0;
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c395();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseTRUE() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c396) {
        s0 = peg$c396;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c397); }
      }

      return s0;
    }

    function peg$parseFALSE() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c398) {
        s0 = peg$c398;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c399); }
      }

      return s0;
    }

    function peg$parsePAUSESECTIONS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c400) {
        s1 = peg$c400;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c401); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePAUSESUBSECTIONS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c402) {
        s1 = peg$c402;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c403); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSECTIONSTYLE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c404) {
        s1 = peg$c404;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c405); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSUBSECTIONSTYLE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c406) {
        s1 = peg$c406;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c407); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSHOW() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c408) {
        s1 = peg$c408;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c409); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseHIDE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c410) {
        s1 = peg$c410;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c411); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSHADED() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c412) {
        s1 = peg$c412;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c413); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBG() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c414) {
        s1 = peg$c414;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c415); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFG() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c416) {
        s1 = peg$c416;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c417); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseALPHA() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c418) {
        s1 = peg$c418;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c419); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFILL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c420) {
        s1 = peg$c420;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c421); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSIZE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c422) {
        s1 = peg$c422;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c423); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSHAPE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c424) {
        s1 = peg$c424;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFAMILY() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c426) {
        s1 = peg$c426;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c427); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTINY() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c428) {
        s0 = peg$c428;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c429); }
      }

      return s0;
    }

    function peg$parseSCRIPTSIZE() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c430) {
        s0 = peg$c430;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c431); }
      }

      return s0;
    }

    function peg$parseFOOTNOTESIZE() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c432) {
        s0 = peg$c432;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c433); }
      }

      return s0;
    }

    function peg$parseVERYSMALL() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c434) {
        s0 = peg$c434;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c435); }
      }

      return s0;
    }

    function peg$parseSMALL() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c436) {
        s0 = peg$c436;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c437); }
      }

      return s0;
    }

    function peg$parseNORMALSIZE() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c438) {
        s0 = peg$c438;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c439); }
      }

      return s0;
    }

    function peg$parseLARGE() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c440) {
        s0 = peg$c440;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c441); }
      }

      return s0;
    }

    function peg$parseVERYLARGE() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c442) {
        s0 = peg$c442;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }

      return s0;
    }

    function peg$parseHUGE() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c444) {
        s0 = peg$c444;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c445); }
      }

      return s0;
    }

    function peg$parseBOLD() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c446) {
        s0 = peg$c446;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c447); }
      }

      return s0;
    }

    function peg$parseITALIC() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c448) {
        s0 = peg$c448;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c449); }
      }

      return s0;
    }

    function peg$parseNORMAL() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c208) {
        s0 = peg$c208;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }

      return s0;
    }

    function peg$parseBOLDITALIC() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c450) {
        s0 = peg$c450;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c451); }
      }

      return s0;
    }

    function peg$parseJUSTIFY() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c452) {
        s0 = peg$c452;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c453); }
      }

      return s0;
    }

    function peg$parseBORDER() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c454) {
        s1 = peg$c454;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c455); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePADDING() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c456) {
        s1 = peg$c456;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c457); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSHAPE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c424) {
        s1 = peg$c424;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseTHIN() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c458) {
        s0 = peg$c458;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c459); }
      }

      return s0;
    }

    function peg$parseTHICK() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c460) {
        s0 = peg$c460;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c461); }
      }

      return s0;
    }

    function peg$parseMEDIUM() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c462) {
        s0 = peg$c462;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c463); }
      }

      return s0;
    }

    function peg$parseNONE() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c464) {
        s0 = peg$c464;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c465); }
      }

      return s0;
    }

    function peg$parseSOLID() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c466) {
        s0 = peg$c466;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c467); }
      }

      return s0;
    }

    function peg$parseDASHED() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c468) {
        s0 = peg$c468;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c469); }
      }

      return s0;
    }

    function peg$parseDOTTED() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c470) {
        s0 = peg$c470;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c471); }
      }

      return s0;
    }

    function peg$parseTRIANGLE() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c472) {
        s0 = peg$c472;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c473); }
      }

      return s0;
    }

    function peg$parseCIRCLE() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c474) {
        s0 = peg$c474;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c475); }
      }

      return s0;
    }

    function peg$parseTICK() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c476) {
        s0 = peg$c476;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c477); }
      }

      return s0;
    }

    function peg$parseSQUARE() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c478) {
        s0 = peg$c478;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c479); }
      }

      return s0;
    }

    function peg$parseRECTANGLE() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c480) {
        s0 = peg$c480;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c481); }
      }

      return s0;
    }

    function peg$parsePLAIN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c482) {
        s1 = peg$c482;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c483); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSUPBIN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c484) {
        s1 = peg$c484;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c485); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseQUIZLABEL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c90) {
        s1 = peg$c90;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSIMPLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c486) {
        s1 = peg$c486;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c487); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMCQ() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c488) {
        s1 = peg$c488;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c489); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseALIGN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c490) {
        s1 = peg$c490;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePLACEMENT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c492) {
        s1 = peg$c492;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c493); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseB() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 98) {
        s1 = peg$c494;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c495); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 116) {
        s1 = peg$c496;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c497); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseC() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 99) {
        s1 = peg$c498;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c499); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLEFT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c500) {
        s1 = peg$c500;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c501); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRIGHT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c502) {
        s1 = peg$c502;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c503); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCENTER() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c504) {
        s1 = peg$c504;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c505); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseWIDTH() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c506) {
        s1 = peg$c506;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c507); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHEIGHT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c508) {
        s1 = peg$c508;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c509); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSCALE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c510) {
        s1 = peg$c510;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c511); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBEGIN() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c512) {
          s2 = peg$c512;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c513); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEND() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c515) {
          s2 = peg$c515;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c516); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSET() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c517) {
          s2 = peg$c517;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c518); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseUSE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c519) {
          s2 = peg$c519;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c520); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseINSERT() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c521) {
          s2 = peg$c521;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c522); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSTYLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c523) {
        s1 = peg$c523;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c524); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLAYOUT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c525) {
        s1 = peg$c525;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c526); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTHEME() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c527) {
        s1 = peg$c527;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c528); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseWITH() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c529) {
        s1 = peg$c529;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c530); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c531) {
        s1 = peg$c531;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c532); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCANVAS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c533) {
        s1 = peg$c533;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c534); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFONT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c535) {
        s1 = peg$c535;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c536); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseGUIDE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c537) {
        s1 = peg$c537;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c538); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c539();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseONLY() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c540) {
        s0 = peg$c540;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c541); }
      }

      return s0;
    }

    function peg$parseVISIBLE() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c542) {
        s0 = peg$c542;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c543); }
      }

      return s0;
    }

    function peg$parseINVISIBLE() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c544) {
        s0 = peg$c544;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c545); }
      }

      return s0;
    }

    function peg$parseALT() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c546) {
        s0 = peg$c546;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c547); }
      }

      return s0;
    }

    function peg$parseTEMPORAL() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c548) {
        s0 = peg$c548;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c549); }
      }

      return s0;
    }

    function peg$parseSECTION() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c58) {
          s2 = peg$c58;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSUBSECTION() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c60) {
          s2 = peg$c60;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSUBSUBSECTION() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c62) {
          s2 = peg$c62;
          peg$currPos += 13;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseITEM() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c550) {
        s1 = peg$c550;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c551); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTITLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c70) {
        s1 = peg$c70;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseALERT() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c212) {
        s0 = peg$c212;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }

      return s0;
    }

    function peg$parseHIGHLIGHT() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c210) {
        s0 = peg$c210;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }

      return s0;
    }

    function peg$parseTEXTIT() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c552) {
        s0 = peg$c552;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c553); }
      }

      return s0;
    }

    function peg$parseTEXTBF() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c554) {
        s0 = peg$c554;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c555); }
      }

      return s0;
    }

    function peg$parseUNDERLINE() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c556) {
        s0 = peg$c556;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c557); }
      }

      return s0;
    }

    function peg$parseCOLOR() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c558) {
        s0 = peg$c558;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c559); }
      }

      return s0;
    }

    function peg$parseINCLUDEGRAPHICS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c560) {
        s1 = peg$c560;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c561); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCAPTION() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c232) {
        s0 = peg$c232;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }

      return s0;
    }

    function peg$parseSUBITEM() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c562) {
        s1 = peg$c562;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c563); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSUBSUBITEM() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c564) {
        s1 = peg$c564;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c565); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCIRCLEFULL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c566) {
        s1 = peg$c566;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c567); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c568();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCIRCLEHALF() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c569) {
        s1 = peg$c569;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c570); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c571();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCIRCLECONE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c572) {
        s1 = peg$c572;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c573); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c574();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePLUSEQUALHORIZONTAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 21) === peg$c575) {
        s1 = peg$c575;
        peg$currPos += 21;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c576); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c577();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePLUSEQUALVERTICAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c578) {
        s1 = peg$c578;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c579); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c580();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePLUSMINUS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c581) {
        s1 = peg$c581;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c582); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c583();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePARAGRAPHLIST() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c584) {
        s1 = peg$c584;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c585); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c586();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCHECKBOXCOMPARISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c587) {
        s1 = peg$c587;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c588); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c589();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCONTAINERLIST() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c590) {
        s1 = peg$c590;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c591); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c592();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFRAMEDLIST() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c593) {
        s1 = peg$c593;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c594); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c595();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseQUESTION() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c596) {
          s2 = peg$c596;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c597); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCORRECTANSWERS() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 14) === peg$c598) {
          s2 = peg$c598;
          peg$currPos += 14;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c599); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseANSWEROPTION() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c600) {
          s2 = peg$c600;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c601); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEXPLANATION() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseBSLASH();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c602) {
          s2 = peg$c602;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c603); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c514();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSUBTITLE() {
      var s0;

      if (input.substr(peg$currPos, 8) === peg$c72) {
        s0 = peg$c72;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }

      return s0;
    }

    function peg$parseLOGO() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c64) {
        s0 = peg$c64;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      return s0;
    }

    function peg$parseAUTHORS() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c604) {
        s0 = peg$c604;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c605); }
      }

      return s0;
    }

    function peg$parseINSTITUTE() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c76) {
        s0 = peg$c76;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }

      return s0;
    }

    function peg$parseDATE() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c78) {
        s0 = peg$c78;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      return s0;
    }

    function peg$parseTITLEGRAPHIC() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c606) {
        s0 = peg$c606;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c607); }
      }

      return s0;
    }

    function peg$parseSECTIONGRAPHIC() {
      var s0;

      if (input.substr(peg$currPos, 14) === peg$c608) {
        s0 = peg$c608;
        peg$currPos += 14;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c609); }
      }

      return s0;
    }

    function peg$parseSUBSECTIONGRAPHIC() {
      var s0;

      if (input.substr(peg$currPos, 17) === peg$c610) {
        s0 = peg$c610;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c611); }
      }

      return s0;
    }

    function peg$parseCOVERED() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c612) {
        s0 = peg$c612;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c613); }
      }

      return s0;
    }

    function peg$parsePRES() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c614) {
          s2 = peg$c614;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c615); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAPPEARANCE() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c616) {
          s2 = peg$c616;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c617); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseINFORMATION() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c618) {
          s2 = peg$c618;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c619); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCONTENT() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c620) {
          s2 = peg$c620;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c621); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSLIDE() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c622) {
          s2 = peg$c622;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c623); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCOLUMNS() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c624) {
          s2 = peg$c624;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c625); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCOLUMN() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c626) {
          s2 = peg$c626;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c627); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSUPPORTBIN() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c484) {
          s2 = peg$c484;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c485); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseQUIZ() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c90) {
          s2 = peg$c90;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c91); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBLOCK() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c198) {
          s2 = peg$c198;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c199); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseALERTBLOCK() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c204) {
          s2 = peg$c204;
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c205); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseFRAMEBOX() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c200) {
          s2 = peg$c200;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c201); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIMAGEBOX() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c202) {
          s2 = peg$c202;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c203); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseENUMERATE() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c628) {
          s2 = peg$c628;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c629); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c98(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseITEMIZE() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c630) {
          s2 = peg$c630;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c631); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c98(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDESCRIPTION() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 11) === peg$c632) {
          s2 = peg$c632;
          peg$currPos += 11;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c633); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c98(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSMARTLIST() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLCURLY();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c634) {
          s2 = peg$c634;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c635); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRCURLY();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c514();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseEQ() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c636;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c637); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseCOMMA() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c638;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c639); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLCURLY() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c640;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c641); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRCURLY() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c642;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c643); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLSQUARE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c644;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c645); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRSQUARE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c646;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c647); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIgnore_();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLANGLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c648;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c649); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRANGLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c650;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c651); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBSLASH() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c653;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c654); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c652); }
      }

      return s0;
    }

    function peg$parsePERCENT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c655;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c656); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c98(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOLON() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 58) {
        s0 = peg$c657;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c658); }
      }

      return s0;
    }

    function peg$parseHYPHEN() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c659;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c660); }
      }

      return s0;
    }

    function peg$parsePLUS() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c661;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c662); }
      }

      return s0;
    }

    function peg$parseEXCLAIM() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 33) {
        s0 = peg$c663;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c664); }
      }

      return s0;
    }

    function peg$parseBAR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c665;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c666); }
      }

      return s0;
    }

    function peg$parseTILDE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 126) {
        s0 = peg$c667;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c668); }
      }

      return s0;
    }

    function peg$parseChar() {
      var s0;

      if (peg$c669.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c670); }
      }

      return s0;
    }

    function peg$parseWhite() {
      var s0;

      if (peg$c671.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c672); }
      }

      return s0;
    }

    function peg$parseSpecChar() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c674.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c675); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c673); }
      }

      return s0;
    }

    function peg$parseNonLetter() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseWhite();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSpecChar();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c676); }
      }

      return s0;
    }

    function peg$parseLetter() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseNonLetter();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c388;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c678); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c128(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c677); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWhite();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseWhite();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c679();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIgnore_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseWhite();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWhite();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c514();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDigit() {
      var s0;

      if (peg$c680.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c681); }
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parseDigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDigit();
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c682(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFloat() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseDigit();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDigit();
        }
      } else {
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c683;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c684); }
        }
        if (s4 === peg$FAILED) {
          s4 = peg$c2;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseDigit();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseDigit();
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c685(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLabelStartChar() {
      var s0;

      s0 = peg$parseChar();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s0 = peg$c686;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c687); }
        }
      }

      return s0;
    }

    function peg$parseLabelChar() {
      var s0;

      s0 = peg$parseLabelStartChar();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDigit();
      }

      return s0;
    }

    function peg$parseLabel() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLabelStartChar();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseLabelChar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseLabelChar();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c688(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseStringLine() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseChar();
      if (s2 === peg$FAILED) {
        s2 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseChar();
          if (s2 === peg$FAILED) {
            s2 = peg$parse_();
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFileName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseLabelChar();
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s2 = peg$c689;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c690); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c653;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c654); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s2 = peg$c683;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c684); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c638;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c639); }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseLabelChar();
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c689;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c690); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 92) {
                s2 = peg$c653;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c654); }
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s2 = peg$c683;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c684); }
                }
                if (s2 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s2 = peg$c638;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c639); }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCommaSepString() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseChar();
      if (s2 === peg$FAILED) {
        s2 = peg$parse_();
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c638;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c639); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseChar();
          if (s2 === peg$FAILED) {
            s2 = peg$parse_();
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s2 = peg$c638;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c639); }
              }
            }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }


      var textMode = false;
      var slideType = {normal: "normal", plain:"plain", supportbin:"supportbin"};
      var listLevel =0;
      var maxTick =0;  

      var sectionNum = 0;
      var subsectionNum = 0;
      var subsubsectionNum = 0;
      var slideNum = 0;
      var sectionList = [];

      var smartItemNum = 0;
      var smartSubItemNum = 0;
      var smartSubsubItemNum = 0;
     

      var supportbinList = [];
      var quizList = [];

      var templateCanvas = [];
      var templateColors =[];
      var templateFonts = [];
      var guidingCanvas = []
      var guidingColors = [];
      var guidingFonts = [];
      var templateLayout = [];
      var defThemes = { layout: ""
                      , style: ""
                      , font: [""]
                      }

      function makeOptions(firstOption, rest, def){
        def[firstOption[0]] = firstOption[1];
        for(var i=0;i<rest.length;i++){
            def[rest[i][1][0]] = rest[i][1][1];
        } 
      }
      function makeSlideOptions(firstOption, rest){
        var defSlide = { plain: "false"
                       , supportbin: ""
                       , quiz:""
                       };
        makeOptions(firstOption, rest, defSlide);
        return defSlide;  
      }
      function makeColumnOptions(firstOption, rest){
        var defColumn = { align: "c"
                        , placement: "center"
                        };
        makeOptions(firstOption, rest, defColumn);
        return defColumn;  
      }
      function makeImageOptions(firstOption, rest){
        var defImage = {  width: ""
                        , height: ""
                        , scale: ""
                        };
        makeOptions(firstOption, rest, defImage);
        return defImage;  
      }
      function makeInfo(infoList){
        var defInfo =  { title: ""
                    , subtitle: ""
                    , authors:""
                    , institute:""
                    , date: ""
                    , logo: ""
                    , titlegraphic: ""
                    , sectiongraphic: ""
                    , subsectiongraphic: ""
                    }
        for(var i=0;i<infoList.length;i++){
            defInfo[infoList[i][0]] = infoList[i][1];
        } 
        return defInfo;  
      }
      function makeCanvasOptions(firstOption, rest){
        var defCanvas =  { border: ""
                  , borderstyle: ""
                  , leftpadding: ""
                  , rightpadding: ""
                  , toppadding: ""
                  , bottompadding: ""
                  }
        function set(op){
           if (op[0] == "border")
           {defCanvas.border = op[1];
            defCanvas.borderstyle = op[2];
           }
           else if (op[0] == "padding")
           {defCanvas.leftpadding = op[1];
            defCanvas.toppadding = op[2];
            defCanvas.rightpadding = op[3];
            defCanvas.bottompadding = op[4];
           }

        }
        set(firstOption);
        for(var i=0;i<rest.length;i++){
            set(rest[i][1]);
        } 
        return defCanvas;  
      }
    //------------------------------------------------------
      function makeColorOptions(firstOption, rest){
        var defColor =  { bg: ""
                  , fg:""
                  , border: ""
                  , leftpadding: ""
                  , rightpadding: ""
                  , toppadding: ""
                  , bottompadding: ""
                  };
        function set(op){
           if (op[0] == "border")
           {defColor.border = op[1];
           }
           else if (op[0] == "padding")
           {defColor.leftpadding = op[1];
            defColor.toppadding = op[2];
            defColor.rightpadding = op[3];
            defColor.bottompadding = op[4];
           }
           else if (op[0] == "bg")
           {defColor.bg = op[1];
           }
           else if (op[0] == "fg")
           {defColor.fg = op[1];
           }

        }
        set(firstOption);
        for(var i=0;i<rest.length;i++){
            set(rest[i][1]);
        } 
        return defColor;  
      }
      function makeFontOptions(firstOption, rest){
        var defFont =  { size: ""
                    , shape: ""
                    , align: ""
                    , family: ""
                    };
        
        defFont[firstOption[0]]=firstOption[1];
        for(var i=0;i<rest.length;i++){
            defFont[rest[i][1][0]]=rest[i][1][1];
        } 
        return defFont;  
      }
      


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
